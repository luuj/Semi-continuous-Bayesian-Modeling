runif(1,20,60)
sample(20:60,1)
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
age <- sapply(y, function(y_i){
ifelse(y_i==1, sample(20:60,1), sample(30:70,1))
})
dat <- data.frame(y,trt,age)
# Generate simple data set
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
age <- sapply(y, function(y_i){
ifelse(y_i==1, sample(20:60,1), sample(30:70,1))
})
dat <- data.frame(y,trt,age)
dat
# Univariate logistic regression
lr <- glm(y ~ trt + age, family="binomial", data=dat)
summary(lr)
# Bayesian logistic regression through package
library(MCMCpack)
logmcmc = MCMClogit(y~as.factor(x), burnin=1000, mcmc=20000)
summary(logmcmc)
logmcmc = MCMClogit(y~as.factor(trt) + age, burnin=1000, mcmc=20000)
summary(logmcmc)
summary(lr)
dat
theta <- c(1,2,3)
theta[1]
theta[-1]
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, x){
a <- theta[1]
b <- theta[-1]
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
summary(lr)
theta.test <- c(2.81,0.36,-0.07)
dat
library(tidyverse)
y
y
data.table(y)
library(tidyverse)
library(dplyr)
as.data.table(y)
library(MCMCpack)
library(tidyverse)
data.table::data.table(y=sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
data.frame(sample(c(0,1), n, replace=TRUE))
sample(c(0,1), n, replace=TRUE)
# Generate simple data set
set.seed(3)
n <- 1000
data.frame(sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
dat <- data.frame(y=sample(c(0,1), n, replace=TRUE))
dat
head(dat)
dat %>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
dat %<>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
dat <- dat %>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
dat
dat$trt
dat$y
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
library(MCMCpack)
# Generate simple data set
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
age <- sapply(y, function(y_i){
ifelse(y_i==1, sample(20:60,1), sample(30:70,1))
})
dat <- data.frame(y,trt,age)
library(dplyr)
y.test <- dat %>% select(y)
x.test <- dat %>% select(-y)
x.test
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
theta.test <- c(2.81,0.36,-0.07)
log_lik(theta.test,y.test,x.test)
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
browser()
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
log_lik(theta.test,y.test,x.test)
a
b
y
x
b%*%as.matrix(x)
dim(b)
dim(x)
as.matrix(b)
dim(as.matrix(b))
dim(as.matrix(b, row=1))
dim(as.matrix(b, nrow=1))
dim(t(as.matrix(b))
)
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
browser()
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
log_lik(theta.test,y.test,x.test)
a
b
dim(x)
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
##**************##
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,],
getOR(fitAFT.SemiPara.V0)[2:3,]),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,],
getOR(fitAFT.SemiPara.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,],
getOR(fitAFT.SemiPara.V2)[2:3,]))
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
## Recode race and smoking to make the referent valued 0
##
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
##**************##
####QUESTION 4####
##**************##
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
summary(fitAFT.Exp.V1)
exp(0.14)
exp(-0.7357)
getOR(fitAFT.Weibull.V0)[2:3,]
getOR(fitAFT.Exp.V1)[2:3,]
cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,],
getOR(fitAFT.SemiPara.V0)[2:3,])
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,])
getOR(fitAFT.Exp.V0)[2:3,]
getOR(fitAFT.Weibull.V0)[2:3,]
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
library(survival)
library(xtable)
library(aftgee)
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
cbind(rbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
rbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
rbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
fitAFT.Exp.V1
getOR(fitAFT.Exp.V1)
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Convert to hazard ratio scale
calcHR <- function(val, scale){
round(exp(-val/scale),2)
}
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Exponential VTF - partially adjusted
calcHR(log(0.48),1)
calcHR(log(0.33),1)
calcHR(log(0.70),1)
getOR(fitAFT.Weibull.V1)
calcHR(log(0.43), fitAFT.Weibull.V1$scale)
calcHR(log(0.27), fitAFT.Weibull.V1$scale)
calcHR(log(0.68), fitAFT.Weibull.V1$scale)
calcHR(log(1.15), fitAFT.Weibull.V1$scale)
calcHR(log(0.81), fitAFT.Weibull.V1$scale)
calcHR(log(1.64), fitAFT.Weibull.V1$scale)
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Exponential VTF - partially adjusted
calcHR(log(0.48),1)
calcHR(log(0.33),1)
calcHR(log(0.70),1)
# Weibull standard fistula - partially adjusted
calcHR(log(1.15), fitAFT.Weibull.V1$scale)
calcHR(log(0.81), fitAFT.Weibull.V1$scale)
calcHR(log(1.64), fitAFT.Weibull.V1$scale)
# Weibull VTF - partially adjusted
calcHR(log(0.43), fitAFT.Weibull.V1$scale)
calcHR(log(0.27), fitAFT.Weibull.V1$scale)
calcHR(log(0.68), fitAFT.Weibull.V1$scale)
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
r
version
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
install.packages("RcppArmadillo")
require(RcppArmadillo)
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
install.packages("RcppAramdillo")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
## Unclustered simulation
set.seed(3)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n, J=1, sigma_v=1)
dat <- dat %>% select(-cluster, -V_j)
library(dplyr)
library(lme4)
library(Rcpp)
require(RcppArmadillo)
sourceCpp("BLR_func.cpp")
source("BLR_func.R")
source("Data_generator.R")
library(dplyr)
library(lme4)
library(Rcpp)
require(RcppArmadillo)
setwd("~/Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression")
sourceCpp("BLR_func.cpp")
source("BLR_func.R")
source("Data_generator.R")
## Unclustered simulation
set.seed(3)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n, J=1, sigma_v=1)
dat <- dat %>% select(-cluster, -V_j)
# Initialize parameters
n_iter <- 70000
burn_in <- 5000
beta.init <- rep(0,ncol(dat))
jump_sigma <- c(0.25,0.2,0.01,0.01)
y <- as.matrix(dat %>% select(y))
x <- cbind(1,as.matrix(dat %>% select(-y)))
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
theta <- matrix(c(14.24,0.22,-0.07,-0.44))
x
x%*%theta
log_lik_u(theta,y,x)
log_lik_u(theta,y,x) == x%*%theta
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
log_lik_u(theta,y,x)
log_lik_u(theta,y,x) == expit(x%*%theta)
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
library(dplyr)
library(lme4)
library(Rcpp)
require(RcppArmadillo)
sourceCpp("BLR_func.cpp")
source("BLR_func.R")
source("Data_generator.R")
set.seed(3)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n, J=1, sigma_v=1)
dat <- dat %>% select(-cluster, -V_j)
# Initialize parameters
n_iter <- 70000
burn_in <- 5000
beta.init <- rep(0,ncol(dat))
jump_sigma <- c(0.25,0.2,0.01,0.01)
y <- as.matrix(dat %>% select(y))
x <- cbind(1,as.matrix(dat %>% select(-y)))
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
MHu(as.matrix(y), as.matrix(x), beta.init, jump_sigma, n_iter, burn_in)
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
MHu(as.matrix(y), as.matrix(x), beta.init, jump_sigma, n_iter, burn_in)
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
test <- MHu(as.matrix(y), as.matrix(x), beta.init, jump_sigma, n_iter, burn_in)
Rcpp::sourceCpp("BLR_func.cpp")
head(MHu(as.matrix(y), as.matrix(x), beta.init, jump_sigma, n_iter, burn_in))
beta.init <- rep(2,ncol(dat))
head(MHu(as.matrix(y), as.matrix(x), beta.init, jump_sigma, n_iter, burn_in))
beta.init <- rep(0,ncol(dat))
head(MHu(as.matrix(y), as.matrix(x), beta.init, jump_sigma, n_iter, burn_in))
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
# Initialize parameters
n_iter <- 10
head(MHu(as.matrix(y), as.matrix(x), beta.init, jump_sigma, n_iter, burn_in))
burn_in <- 5
head(MHu(as.matrix(y), as.matrix(x), beta.init, jump_sigma, n_iter, burn_in))
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")
sample(4)
Rcpp::sourceCpp("BLR_func.cpp")
head(MHu(as.matrix(y), as.matrix(x), beta.init, jump_sigma, n_iter, burn_in))
Rcpp::sourceCpp("BLR_func.cpp")
Rcpp::sourceCpp("BLR_func.cpp")

a <- log(rexp(1, 1 / b.mme))
b <- rnorm(1, b.mle, sqrt(var.b.mle)/2)
return(c(a, b))
}
mh.out <- MH(c(0, 0), posterior, dprop, rprop, N, B)
alpha.mh <- mh.out$x[,1]
beta.mh <- mh.out$x[,2]
plot(alpha.mh, type="l", col="gray", xlab="Iteration")
lines(1:N, cumsum(alpha.mh) / (1:N))
# Generate simple data set
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
x <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
dat <- data.frame(y,x)
dat
runif(1,20,60)
sample(20:60,1)
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
age <- sapply(y, function(y_i){
ifelse(y_i==1, sample(20:60,1), sample(30:70,1))
})
dat <- data.frame(y,trt,age)
# Generate simple data set
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
age <- sapply(y, function(y_i){
ifelse(y_i==1, sample(20:60,1), sample(30:70,1))
})
dat <- data.frame(y,trt,age)
dat
# Univariate logistic regression
lr <- glm(y ~ trt + age, family="binomial", data=dat)
summary(lr)
# Bayesian logistic regression through package
library(MCMCpack)
logmcmc = MCMClogit(y~as.factor(x), burnin=1000, mcmc=20000)
summary(logmcmc)
logmcmc = MCMClogit(y~as.factor(trt) + age, burnin=1000, mcmc=20000)
summary(logmcmc)
summary(lr)
dat
theta <- c(1,2,3)
theta[1]
theta[-1]
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, x){
a <- theta[1]
b <- theta[-1]
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
summary(lr)
theta.test <- c(2.81,0.36,-0.07)
dat
library(tidyverse)
y
y
data.table(y)
library(tidyverse)
library(dplyr)
as.data.table(y)
library(MCMCpack)
library(tidyverse)
data.table::data.table(y=sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
data.frame(sample(c(0,1), n, replace=TRUE))
sample(c(0,1), n, replace=TRUE)
# Generate simple data set
set.seed(3)
n <- 1000
data.frame(sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
dat <- data.frame(y=sample(c(0,1), n, replace=TRUE))
dat
head(dat)
dat %>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
dat %<>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
dat <- dat %>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
dat
dat$trt
dat$y
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
library(MCMCpack)
# Generate simple data set
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
age <- sapply(y, function(y_i){
ifelse(y_i==1, sample(20:60,1), sample(30:70,1))
})
dat <- data.frame(y,trt,age)
library(dplyr)
y.test <- dat %>% select(y)
x.test <- dat %>% select(-y)
x.test
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
theta.test <- c(2.81,0.36,-0.07)
log_lik(theta.test,y.test,x.test)
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
browser()
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
log_lik(theta.test,y.test,x.test)
a
b
y
x
b%*%as.matrix(x)
dim(b)
dim(x)
as.matrix(b)
dim(as.matrix(b))
dim(as.matrix(b, row=1))
dim(as.matrix(b, nrow=1))
dim(t(as.matrix(b))
)
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
browser()
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
log_lik(theta.test,y.test,x.test)
a
b
dim(x)
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
##**************##
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,],
getOR(fitAFT.SemiPara.V0)[2:3,]),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,],
getOR(fitAFT.SemiPara.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,],
getOR(fitAFT.SemiPara.V2)[2:3,]))
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
## Recode race and smoking to make the referent valued 0
##
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
##**************##
####QUESTION 4####
##**************##
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
summary(fitAFT.Exp.V1)
exp(0.14)
exp(-0.7357)
getOR(fitAFT.Weibull.V0)[2:3,]
getOR(fitAFT.Exp.V1)[2:3,]
cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,],
getOR(fitAFT.SemiPara.V0)[2:3,])
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,])
getOR(fitAFT.Exp.V0)[2:3,]
getOR(fitAFT.Weibull.V0)[2:3,]
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
library(survival)
library(xtable)
library(aftgee)
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
cbind(rbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
rbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
rbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
fitAFT.Exp.V1
getOR(fitAFT.Exp.V1)
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Convert to hazard ratio scale
calcHR <- function(val, scale){
round(exp(-val/scale),2)
}
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Exponential VTF - partially adjusted
calcHR(log(0.48),1)
calcHR(log(0.33),1)
calcHR(log(0.70),1)
getOR(fitAFT.Weibull.V1)
calcHR(log(0.43), fitAFT.Weibull.V1$scale)
calcHR(log(0.27), fitAFT.Weibull.V1$scale)
calcHR(log(0.68), fitAFT.Weibull.V1$scale)
calcHR(log(1.15), fitAFT.Weibull.V1$scale)
calcHR(log(0.81), fitAFT.Weibull.V1$scale)
calcHR(log(1.64), fitAFT.Weibull.V1$scale)
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Exponential VTF - partially adjusted
calcHR(log(0.48),1)
calcHR(log(0.33),1)
calcHR(log(0.70),1)
# Weibull standard fistula - partially adjusted
calcHR(log(1.15), fitAFT.Weibull.V1$scale)
calcHR(log(0.81), fitAFT.Weibull.V1$scale)
calcHR(log(1.64), fitAFT.Weibull.V1$scale)
# Weibull VTF - partially adjusted
calcHR(log(0.43), fitAFT.Weibull.V1$scale)
calcHR(log(0.27), fitAFT.Weibull.V1$scale)
calcHR(log(0.68), fitAFT.Weibull.V1$scale)
setwd("~/Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression")
library(dplyr)
library(lme4)
source("BLR_func.R")
source("BLR_func_cluster.R")
source("Data_generator.R")
### Clustered simulation
set.seed(3)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n_j, J=J, sigma_v=0.5)
stored.vk <- unique(dat.cl$V_j)
dat.cl <- dat.cl %>% select(-V_j)
# GLMM
glmm <- glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
# Initialize parameters
n_iter <- 70000
burn_in <- 3000
theta.init <- c(rep(0,ncol(dat.cl)+J-1),0.5)
gamma.init <- c(1,1)
jump_sigma <- c(0.25,0.2,0.01,0.01,rep(0.2, J),0.2)
y <- dat.cl %>% select(y)
x <- dat.cl %>% select(-y)
summary(glmm)
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
apply(run1,2,mean)
stored.vk
apply(run1,2,mean)
run1
plot(1:n_iter, run1[,1], type="l", xlab="Iteration", ylab="Beta_hat", main="Intercept")
par(mfrow=c(2,2))
plot(1:n_iter, run1[,1], type="l", xlab="Iteration", ylab="Beta_hat", main="Intercept")
plot(1:n_iter, run1[,2], type="l", xlab="Iteration", ylab="Beta_hat", main="Trt")
plot(1:n_iter, run1[,3], type="l", xlab="Iteration", ylab="Beta_hat", main="Age")
plot(1:n_iter, run1[,4], type="l", xlab="Iteration", ylab="Beta_hat", main="BMI")
plot(1:n_iter, run1[,5], type="l", xlab="Iteration", ylab="Beta_hat", main="Intercept")
plot(1:n_iter, run1[,6], type="l", xlab="Iteration", ylab="Beta_hat", main="Trt")
plot(1:n_iter, run1[,7], type="l", xlab="Iteration", ylab="Beta_hat", main="Age")
plot(1:n_iter, run1[,8], type="l", xlab="Iteration", ylab="Beta_hat", main="BMI")
par(mfrow=c(2,2))
plot(1:n_iter, run1[,5], type="l", xlab="Iteration", ylab="Vk_hat", main="Vk1")
plot(1:n_iter, run1[,6], type="l", xlab="Iteration", ylab="Vk_hat", main="Vk2")
plot(1:n_iter, run1[,7], type="l", xlab="Iteration", ylab="Vk_hat", main="Vk3")
plot(1:n_iter, run1[,8], type="l", xlab="Iteration", ylab="Vk_hat", main="Vk4")
apply(run1,2,mean)
summary(glmm)
help("rnorm")
summary(glmm)
library(dplyr)
library(lme4)
source("BLR_func.R")
source("BLR_func_cluster.R")
source("Data_generator.R")
### Clustered simulation
set.seed(3)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n_j, J=J, sigma_v=0.5)
stored.vk <- unique(dat.cl$V_j)
dat.cl <- dat.cl %>% select(-V_j)
# GLMM
glmm <- glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
# Initialize parameters
n_iter <- 70000
burn_in <- 3000
theta.init <- c(rep(0,ncol(dat.cl)+J-1),0.5)
gamma.init <- c(1,1)
jump_sigma <- c(0.25,0.2,0.01,0.01,rep(0.2, J),0.2)
y <- dat.cl %>% select(y)
x <- dat.cl %>% select(-y)
head(dat.cl)
tail(dat.cl)
# GLMM
glmm <- glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
summary(glmm)
summary(dat.cl)
dat.cl$age <- (dat.cl$age - 45)/5
dat.cl$bmi <- (dat.cl$bmi - 30)/5
# GLMM
glmm <- glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
summary(glmm)
(-.346454/5)
# Initialize parameters
n_iter <- 70000
burn_in <- 3000
theta.init <- c(rep(0,ncol(dat.cl)+J-1),0.5)
gamma.init <- c(1,1)
jump_sigma <- c(0.25,0.2,0.01,0.01,rep(0.2, J),0.2)
y <- dat.cl %>% select(y)
x <- dat.cl %>% select(-y)
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in, verbose=T)
set.seed(3)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n_j, J=J, sigma_v=0.5)
stored.vk <- unique(dat.cl$V_j)
dat.cl <- dat.cl %>% select(-V_j)
# Standardized coefficients
dat.cl$bmi <- (dat.cl$bmi - 30)/5
dat.cl$age <- (dat.cl$age - 45)/5
# GLMM
glmm <- glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
# Initialize parameters
n_iter <- 70000
burn_in <- 3000
theta.init <- c(rep(0,ncol(dat.cl)+J-1),0.5)
gamma.init <- c(1,1)
jump_sigma <- c(0.25,0.2,0.01,0.01,rep(0.2, J),0.2)
y <- dat.cl %>% select(y)
x <- dat.cl %>% select(-y)
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in, verbose=T)

pr1 <- exp(a) * exp(-exp(a) / b.mme) / b.mme
pr2 <- dnorm(b, b.mle, sqrt(var.b.mle)/2)
return(pr1 * pr2)
}
# Jump proposal function
rprop <- function() {
a <- log(rexp(1, 1 / b.mme))
b <- rnorm(1, b.mle, sqrt(var.b.mle)/2)
return(c(a, b))
}
mh.out <- MH(c(0, 0), posterior, dprop, rprop, N, B)
alpha.mh <- mh.out$x[,1]
beta.mh <- mh.out$x[,2]
plot(alpha.mh, type="l", col="gray", xlab="Iteration")
lines(1:N, cumsum(alpha.mh) / (1:N))
# Generate simple data set
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
x <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
dat <- data.frame(y,x)
dat
runif(1,20,60)
sample(20:60,1)
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
age <- sapply(y, function(y_i){
ifelse(y_i==1, sample(20:60,1), sample(30:70,1))
})
dat <- data.frame(y,trt,age)
# Generate simple data set
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
age <- sapply(y, function(y_i){
ifelse(y_i==1, sample(20:60,1), sample(30:70,1))
})
dat <- data.frame(y,trt,age)
dat
# Univariate logistic regression
lr <- glm(y ~ trt + age, family="binomial", data=dat)
summary(lr)
# Bayesian logistic regression through package
library(MCMCpack)
logmcmc = MCMClogit(y~as.factor(x), burnin=1000, mcmc=20000)
summary(logmcmc)
logmcmc = MCMClogit(y~as.factor(trt) + age, burnin=1000, mcmc=20000)
summary(logmcmc)
summary(lr)
dat
theta <- c(1,2,3)
theta[1]
theta[-1]
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, x){
a <- theta[1]
b <- theta[-1]
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
summary(lr)
theta.test <- c(2.81,0.36,-0.07)
dat
library(tidyverse)
y
y
data.table(y)
library(tidyverse)
library(dplyr)
as.data.table(y)
library(MCMCpack)
library(tidyverse)
data.table::data.table(y=sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
data.frame(sample(c(0,1), n, replace=TRUE))
sample(c(0,1), n, replace=TRUE)
# Generate simple data set
set.seed(3)
n <- 1000
data.frame(sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
dat <- data.frame(y=sample(c(0,1), n, replace=TRUE))
dat
head(dat)
dat %>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
dat %<>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
dat <- dat %>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
dat
dat$trt
dat$y
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
library(MCMCpack)
# Generate simple data set
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
age <- sapply(y, function(y_i){
ifelse(y_i==1, sample(20:60,1), sample(30:70,1))
})
dat <- data.frame(y,trt,age)
library(dplyr)
y.test <- dat %>% select(y)
x.test <- dat %>% select(-y)
x.test
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
theta.test <- c(2.81,0.36,-0.07)
log_lik(theta.test,y.test,x.test)
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
browser()
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
log_lik(theta.test,y.test,x.test)
a
b
y
x
b%*%as.matrix(x)
dim(b)
dim(x)
as.matrix(b)
dim(as.matrix(b))
dim(as.matrix(b, row=1))
dim(as.matrix(b, nrow=1))
dim(t(as.matrix(b))
)
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
browser()
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
log_lik(theta.test,y.test,x.test)
a
b
dim(x)
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
##**************##
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,],
getOR(fitAFT.SemiPara.V0)[2:3,]),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,],
getOR(fitAFT.SemiPara.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,],
getOR(fitAFT.SemiPara.V2)[2:3,]))
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
## Recode race and smoking to make the referent valued 0
##
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
##**************##
####QUESTION 4####
##**************##
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
summary(fitAFT.Exp.V1)
exp(0.14)
exp(-0.7357)
getOR(fitAFT.Weibull.V0)[2:3,]
getOR(fitAFT.Exp.V1)[2:3,]
cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,],
getOR(fitAFT.SemiPara.V0)[2:3,])
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,])
getOR(fitAFT.Exp.V0)[2:3,]
getOR(fitAFT.Weibull.V0)[2:3,]
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
library(survival)
library(xtable)
library(aftgee)
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
cbind(rbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
rbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
rbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
fitAFT.Exp.V1
getOR(fitAFT.Exp.V1)
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Convert to hazard ratio scale
calcHR <- function(val, scale){
round(exp(-val/scale),2)
}
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Exponential VTF - partially adjusted
calcHR(log(0.48),1)
calcHR(log(0.33),1)
calcHR(log(0.70),1)
getOR(fitAFT.Weibull.V1)
calcHR(log(0.43), fitAFT.Weibull.V1$scale)
calcHR(log(0.27), fitAFT.Weibull.V1$scale)
calcHR(log(0.68), fitAFT.Weibull.V1$scale)
calcHR(log(1.15), fitAFT.Weibull.V1$scale)
calcHR(log(0.81), fitAFT.Weibull.V1$scale)
calcHR(log(1.64), fitAFT.Weibull.V1$scale)
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Exponential VTF - partially adjusted
calcHR(log(0.48),1)
calcHR(log(0.33),1)
calcHR(log(0.70),1)
# Weibull standard fistula - partially adjusted
calcHR(log(1.15), fitAFT.Weibull.V1$scale)
calcHR(log(0.81), fitAFT.Weibull.V1$scale)
calcHR(log(1.64), fitAFT.Weibull.V1$scale)
# Weibull VTF - partially adjusted
calcHR(log(0.43), fitAFT.Weibull.V1$scale)
calcHR(log(0.27), fitAFT.Weibull.V1$scale)
calcHR(log(0.68), fitAFT.Weibull.V1$scale)
library(dplyr)
library(coda)
library(lme4)
source("BLR_func.R")
setwd("~/Dropbox/Jonathan-Sebastian/Dissertation/Code/Bayesian linear regression")
source("BLR_func.R")
### Unclustered simulation
## Generate simple data set
# param = beta coefficients
# n = number of observations
# n_cluster = number of clusters
# sigma_v = variance of random effect distribution
gen_data <- function(param, n, n_cluster, sigma_v){
# Generate covariates
age <- sample(20:70,n,replace=TRUE)
trt <- rbinom(n,1,0.5)
bmi <- rnorm(n,28,4)
x <- data.frame(1,trt,age,bmi)
cluster <- rep(1:n_cluster, each=n/n_cluster)
# Generate outcome
if (n_cluster > 1){
vk <- rnorm(n_cluster,0,sigma_v)
pi <- expit(as.matrix(x)%*%as.matrix(param) + rep(vk, each=n/n_cluster)) # Random intercept
}else{
pi <- expit(as.matrix(x)%*%as.matrix(param))
}
y <- rbinom(n,1,pi)
data.frame(y,trt,age,bmi,cluster)
}
set.seed(3)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=1, sigma_v=3)
dat <- dat %>% select(-cluster)
lr <- glm(y ~ trt + age + bmi, family="binomial", data=dat)
summary(lr)
source("BLR_func.R")
run2 <- MH(y, x, theta.init+runif(1,-0.2,0.2), sigma.prior, sigma.jump, num_iter, burn_in)
num_iter <- 30000
burn_in <- 5000
num_var <- ncol(dat)
theta.init <- rep(0,num_var)
y <- as.matrix(dat %>% select(y))
x <- as.matrix(dat %>% select(-y))
sigma.prior <- rep(1,num_var)
sigma.jump <- c(0.2,0.2,0.004,0.01)
run2 <- MH(y, x, theta.init+runif(1,-0.2,0.2), sigma.prior, sigma.jump, num_iter, burn_in)
grads$D1/grads$D2
run2 <- MH(y, x, theta.init+runif(1,-0.5,0.5), sigma.prior, sigma.jump, num_iter, burn_in)
grads$D1/grads$D2
theta_prior
grads$D1
grads$D2
source("BLR_func.R")
run2 <- MH(y, x, theta.init+runif(1,-0.5,0.5), sigma.prior, sigma.jump, num_iter, burn_in)
source("BLR_func.R")
run2 <- MH(y, x, theta.init+runif(1,-0.5,0.5), sigma.prior, sigma.jump, num_iter, burn_in)
coef2 <- run2$coef
coef2
run1 <- MH(y, x, theta.init, sigma.prior, sigma.jump, num_iter, burn_in)
run3 <- MH(y, x, theta.init+runif(1,-0.2,0.2), sigma.prior, sigma.jump, num_iter, burn_in)
# Compare coefficient estimates
coef1 <- run1$coef
coef2 <- run2$coef
coef3 <- run3$coef
data.frame(LR=coefficients(lr), MCMC1=apply(coef1,2,mean),
MCMC2=apply(coef2,2,mean), MCMC3=apply(coef3,2,mean))
# Trace plots
par(mfrow=c(2,2))
plot(1:num_iter, coef1[,1], type="l", xlab="Iteration", ylab="Beta_hat", main="Intercept")
lines(1:num_iter, coef2[,1], col="red")
lines(1:num_iter, coef3[,1], col="blue")
plot(1:num_iter, coef1[,2], type="l", xlab="Iteration", ylab="Beta_hat", main="Trt")
lines(1:num_iter, coef2[,2], col="red")
lines(1:num_iter, coef3[,2], col="blue")
plot(1:num_iter, coef1[,3], type="l", xlab="Iteration", ylab="Beta_hat", main="Age")
lines(1:num_iter, coef2[,3], col="red",)
lines(1:num_iter, coef3[,3], col="blue")
plot(1:num_iter, coef1[,4], type="l", xlab="Iteration", ylab="Beta_hat", main="BMI")
lines(1:num_iter, coef2[,4], col="red")
lines(1:num_iter, coef3[,4], col="blue")
+runif(1,-0.5,0.5)
coef1
hist(c(coef1[,1],coef2[,1],coef3[,1]))
hist(c(coef1[,2],coef2[,2],coef3[,2]))
hist(c(coef1[,3],coef2[,3],coef3[,3]))
hist(c(coef1[,4],coef2[,4],coef3[,4]))
source("BLR_func.R")
run1 <- MH(y, x, theta.init, sigma.prior, sigma.jump, num_iter, burn_in)
source("BLR_func.R")
run1 <- MH(y, x, theta.init, sigma.prior, sigma.jump, num_iter, burn_in)
grads
grads$D1/grads$D2
-(2.4^2)/grads$D2
j
j
grads$D1/grads$D2
-(2.4^2)/grads$D2
theta_hat[i-1,j]
gradients(theta_hat[i-1,], y, x, j)
j
gradients(theta_hat[i-1,]+0.4, y, x, j)
gradients(theta_hat[i-1,]-0.4, y, x, j)
gradients(theta_hat[i-1,]+c(14.5, 0.2, -0.065, -0.475), y, x, j)
theta_hat[i-1,]+c(14.5, 0.2, -0.065, -0.475)
gradients(theta_hat[i-1,]+c(14.5, 0.2, -0.065, -0.475), y, x, ``)
gradients(theta_hat[i-1,]+c(14.5, 0.2, -0.065, -0.475), y, x, 1)
gradients(theta_hat[i-1,]+c(14.5, 0.2, -0.065, -0.475), y, x, 2)
gradients(theta_hat[i-1,]+c(14.5, 0.2, -0.065, -0.475), y, x, 3)
gradients(theta_hat[i-1,]+c(14.5, 0.2, -0.065, -0.475), y, x, 4)
ln(0.00002)
log(0.00002)
log(0.00000000002)

dat.distinct$Num_Visits %>% table() %>% sort(decreasing=T) %>% head(n=15) %>% as.data.frame()
dat.distinct$Num_Visits %>% table() %>% sort(decreasing=T) %>% head(n=15) %>% as.data.frame() %>% rename("Num Visit"=".")
dat.distinct %>% filter(Num_Visits <= 15) %>% pull(Num_Visits) %>%
hist(breaks=0:20, main="Histogram of number of visits", xlab="Number of visits")
dat.distinct %>% filter(Num_Visits <= 15) %>% pull(Num_Visits) %>%
hist(breaks=0:15, main="Histogram of number of visits", xlab="Number of visits")
dat %>% filter(PAT_ID == "Z3347793") %>% View()
dat$FLO_MEAS_NAME %>% unique()
dat$MEAS_DISP_NAME %>% unique()
# Response types
dat$MEAS_DISP_NAME %>% unique() %>% length() # 47 different response types
dat$MEAS_DISP_NAME %>% table()
dat$MEAS_DISP_NAME %>% table() %>% sort() %>% tail()
dat$MEAS_DISP_NAME %>% table() %>% sort()
dat$MEAS_DISP_NAME %>% table() %>% sort() %>% as.data.frame()
dat$MEAS_DISP_NAME %>% table() %>% sort() %>% as_tibble()
options(pillar.print_max = 50, pillar.print_min = 50)
dat$MEAS_DISP_NAME %>% table() %>% sort() %>% as_tibble()
dat$MEAS_DISP_NAME %>% table() %>% sort(decreasing=T) %>% as_tibble()
# Response categories
dat$DOMAIN_GRP %>% table() %>% sort(decreasing=T) %>% as_tibble() # 13 categories of responses
# Individuals with the most # of responses
dat$PAT_ID %>% table() %>% sort(decreasing = T) %>% head(n=15)
# Individuals with the most # of responses
dat$PAT_ID %>% table() %>% sort(decreasing = T) %>% head(n=15) %>% as_tibble()
# Individuals with the most # of responses
dat$PAT_ID %>% table() %>% sort(decreasing = T) %>% head(n=10) %>% as_tibble()
# Race
race.table <- dat.distinct$Race %>% table() %>% sort() %>%
as_tibble() %>% rename(Race=".")
race.table
# Race barplot
race.table %>% ggplot(aes(x=n, y=Race)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Race frequency")
# Ethnicity
eth.table <- dat.distinct$Ethnicity %>% table() %>% sort() %>%
as_tibble() %>% rename(Ethnicity=".")
eth.table
# Ethnicity barplot
eth.table %>% ggplot(aes(x=Freq, y=Ethnicity)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Ethnicity frequency")
# Ethnicity barplot
eth.table %>% ggplot(aes(x=n, y=Ethnicity)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Ethnicity frequency")
# Ethnicity barplot
eth.table %>% as.data.frame() %>% ggplot(aes(x=n, y=Ethnicity)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Ethnicity frequency")
race.table %>% as_tibble()
# Race
race.table <- dat.distinct$Race %>% table() %>% sort() %>%
as_data_frame() %>% rename(Race=".")
# Race
race.table <- dat.distinct$Race %>% table() %>% sort() %>%
as_data_frame() %>% rename(Race=".")
race.table
# Race barplot
race.table %>% ggplot(aes(x=n, y=Race)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Race frequency")
# Race barplot
race.table %>% ggplot(aes(x=n, y=Race)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Race frequency")
# Race
race.table <- dat.distinct$Race %>% table() %>% sort() %>%
as_data_frame() %>% rename(Race=".")
race.table %>% as_tibble()
# Race barplot
race.table %>% ggplot(aes(x=n, y=Race)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Race frequency")
# Race
race.table <- dat.distinct$Race %>% table() %>% sort() %>%
as_data_frame() %>% rename(Race=".")
# Race barplot
race.table %>% ggplot(aes(x=n, y=Race)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Race frequency")
knitr::opts_chunk$set(echo = TRUE, comment = NA)
library(dplyr)
library(tidyr)
library(ggplot2)
# Read in data
dat <- read.csv("/Users/jonathanluu/Dropbox/Caring Health/Data/CHC_SDOH_dataset_1.5.22_SFTPupload.csv")
dat.distinct <- dat %>% distinct(PAT_ID, .keep_all = T)
# Number of unique entries
dat.distinct %>% nrow()
# Age distribution
dat.distinct$Age %>% summary()
dat.distinct$Age %>% hist(main="Histogram of age", xlab="Age (years)")
# Language
dat.distinct$Language %>% unique() %>% length() # 64 different languages spoken
dat.distinct$Language %>% table() %>% sort(decreasing = T) %>%
head(n=15) %>% as_tibble() %>% rename(Language=".") # Most popular languages
# Race
race.table <- dat.distinct$Race %>% table() %>% sort() %>%
as_data_frame() %>% rename(Race=".")
race.table
# Race
race.table <- dat.distinct$Race %>% table() %>% sort() %>%
as.data.frame() %>% rename(Race=".")
race.table %>% as_tibble()
# Race barplot
race.table %>% ggplot(aes(x=n, y=Race)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Race frequency")
# Race barplot
race.table %>% ggplot(aes(x=Freq, y=Race)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Race frequency")
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>% filter(DOMAIN_GRP != "") %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat.resp %>% select(-PAT_ID) %>%  summary()
dat.resp %>% select(-PAT_ID) %>%  summary()
View(dat.resp)
colsum(dat.resp)
colSums(dat.resp)
dat.resp
dat.resp %>% select(-PAT_ID)
dat.resp %>% select(-PAT_ID) %>% colSums()
# Ranges of screening
dat.resp[is.na(dat.resp)] <- 0
dat.resp %>% select(-PAT_ID) %>%  summary()
View(dat.resp)
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>% filter(DOMAIN_GRP != "") %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat.resp %>% select(-PAT_ID) %>%  summary()
dat.resp %>% is.na()
# Ranges of screening
dat.resp[is.na(dat.resp)] <- 0
dat.resp %>% colSums()
dat.resp %>% select(-PAT_ID) %>% colSums()
dat.resp %>% select(-PAT_ID) %>% mutate(num_q = colSums())
dat.resp %>% select(-PAT_ID) %>% mutate(num_q = rowsum())
dat.resp %>% select(-PAT_ID) %>% mutate(num_q = rowsum(.))
dat.resp %>% select(-PAT_ID) %>% mutate(num_q = rowSums(.))
dat.resp <- dat.resp %>% select(-PAT_ID) %>% mutate(num_q = rowSums(.))
View(dat.resp)
# Number of questions answered
dat.resp %>% summary(num_q)
# Number of questions answered
dat.resp %>% select(num_q) %>% summary()
dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP)
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP)
dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>% mutate_all(na_if,"")
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>% mutate_all(na_if,"") %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat.resp
dat.resp %>% select(-PAT_ID) %>%  summary()
# Ranges of screening
dat.resp[is.na(dat.resp)] <- 0
dat.resp <- dat.resp %>% select(-PAT_ID) %>% mutate(num_q = rowSums(.))
dat.resp
dat.resp <- dat.resp %>% select(-PAT_ID, -"NA") %>% mutate(num_q = rowSums(.))
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>% mutate_all(na_if,"") %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat.resp %>% select(-PAT_ID) %>% summary()
# Ranges of screening
dat.resp[is.na(dat.resp)] <- 0
dat.resp <- dat.resp %>% select(-PAT_ID, -"NA") %>% mutate(num_q = rowSums(.))
# Number of questions answered
dat.resp %>% select(num_q) %>% summary()
dat.resp
View(dat.resp)
# Number of questions answered
dat.resp %>% select(num_q)
# Number of questions answered
dat.resp %>% table(num_q)
# Number of questions answered
dat.resp %>% table()
# Number of questions answered
dat.resp %>% filter(num_q==0)
# Number of questions answered
dat.resp %>% filter(num_q==0) %>% View()
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>% mutate_all(na_if,"") %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat.resp %>% select(-PAT_ID) %>% summary()
View(dat.resp)
# Ranges of screening
dat.resp[is.na(dat.resp)] <- 0
dat.resp <- dat.resp %>% select(-PAT_ID, -"NA") %>% mutate(num_q = rowSums(.))
View(dat.resp)
# Number of questions answered
dat.resp %>% filter(num_q==0) %>% sum()
# Number of questions answered
dat.resp %>% filter(num_q==0) %>% nrow()
# Number of unique entries
dat.distinct %>% nrow()
# Number of questions answered
dat.resp %>% filter(num_q==0) %>% nrow()
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>% mutate_all(na_if,"") %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat.resp %>% select(-PAT_ID) %>% summary()
dat.resp %>% length()
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>% mutate_all(na_if,"") %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat.resp %>% length()
dat.resp %>% nrow()
# Ranges of screening
dat.resp[is.na(dat.resp)] <- 0
dat.resp <- dat.resp %>% select(-PAT_ID, -"NA") %>% mutate(num_q = rowSums(.))
# Number of questions answered
dat.resp %>% filter(num_q==0) %>% nrow()
View(dat)
View(dat.resp)
dat.resp %>% select(-PAT_ID) %>% summary()
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>% mutate_all(na_if,"") %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat.resp %>% select(-PAT_ID) %>% summary()
# Ranges of screening
dat.resp[is.na(dat.resp)] <- 0
dat.resp <- dat.resp %>% mutate(num_q = rowSums(.))
dat.resp <- dat.resp %>% mutate(sum = rowSums(across(where(is.numeric))))
dat.resp
View(dat.resp)
dat.resp <- dat.resp %>% select(-"NA") mutate(sum = rowSums(across(where(is.numeric))))
dat.resp <- dat.resp %>% select(-"NA") %>% mutate(sum = rowSums(across(where(is.numeric))))
View(dat.resp)
# Ranges of screening
dat.resp[is.na(dat.resp)] <- 0
dat.resp <- dat.resp %>% select(-"NA") %>% mutate(sum = rowSums(across(where(is.numeric))))
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>% mutate_all(na_if,"") %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat.resp %>% select(-PAT_ID) %>% summary()
# Ranges of screening
dat.resp[is.na(dat.resp)] <- 0
dat.resp %>% select(-"NA")
dat.resp %>% select(-"NA") %>% mutate(sum = rowSums(across(where(is.numeric))))
dat.resp <- dat.resp %>% select(-"NA") %>% mutate(sum = rowSums(across(where(is.numeric))))
View(dat.resp)
# Number of questions answered
dat.resp %>% filter(num_q==0) %>% nrow()
# Number of questions answered
dat.resp %>% filter(sum==0) %>% nrow()
dat.resp %>% filter(sum > 0)
dat.resp %>% filter(sum > 0) %>% select(sum)
dat.resp %>% filter(sum > 0) %>% select(sum) %>% summary()
# Number of questions answered
dat.resp %>% filter(sum!=0) %>% nrow() #21611 people did not have a survey answer
knitr::opts_chunk$set(echo = TRUE, comment = NA)
library(dplyr)
library(tidyr)
library(ggplot2)
# Read in data
dat <- read.csv("/Users/jonathanluu/Dropbox/Caring Health/Data/CHC_SDOH_dataset_1.5.22_SFTPupload.csv")
dat.distinct <- dat %>% distinct(PAT_ID, .keep_all = T)
# Number of unique entries
dat.distinct %>% nrow()
# Age distribution
dat.distinct$Age %>% summary()
dat.distinct$Age %>% hist(main="Histogram of age", xlab="Age (years)")
# Language
dat.distinct$Language %>% unique() %>% length() # 64 different languages spoken
dat.distinct$Language %>% table() %>% sort(decreasing = T) %>%
head(n=15) %>% as_tibble() %>% rename(Language=".") # Most popular languages
# Race
race.table <- dat.distinct$Race %>% table() %>% sort() %>%
as.data.frame() %>% rename(Race=".")
race.table %>% as_tibble()
# Race barplot
race.table %>% ggplot(aes(x=Freq, y=Race)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Race frequency")
# Ethnicity
eth.table <- dat.distinct$Ethnicity %>% table() %>% sort() %>%
as.data.frame() %>% rename(Ethnicity=".")
eth.table %>% as_tibble()
# Ethnicity barplot
eth.table %>% ggplot(aes(x=Freq, y=Ethnicity)) + geom_bar(stat="identity") +
theme(axis.text.y=element_text(angle=0,hjust=1,vjust=0.5)) +
ggtitle("Ethnicity frequency")
# Number of visits
dat.distinct$Num_Visits %>% summary()
# Most common number of visits
dat.distinct$Num_Visits %>% table() %>% sort(decreasing=T) %>%
head(n=10) %>% as_tibble() %>% rename("Num Visit"=".")
dat.distinct %>% filter(Num_Visits <= 15) %>% pull(Num_Visits) %>%
hist(breaks=0:15, main="Histogram of number of visits", xlab="Number of visits")
# Response types
dat$MEAS_DISP_NAME %>% unique() %>% length() # 45 different response types
options(pillar.print_max = 50, pillar.print_min = 50)
dat$MEAS_DISP_NAME %>% table() %>% sort(decreasing=T) %>%
as_tibble() %>% rename(Question=".")
# Response categories
dat$DOMAIN_GRP %>% table() %>% sort(decreasing=T) %>%
as_tibble() %>% rename(Response=".") # 13 categories of responses
# Individuals with the most # of responses
dat$PAT_ID %>% table() %>% sort(decreasing = T) %>% head(n=10) %>%
as_tibble() %>% rename(ID=".")
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>%
count(PAT_ID, DOMAIN_GRP) %>% mutate_all(na_if,"") %>%
pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat.resp %>% select(-PAT_ID) %>% summary()
# Ranges of screening
dat.resp[is.na(dat.resp)] <- 0
dat.resp <- dat.resp %>% select(-"NA") %>% mutate(sum = rowSums(across(where(is.numeric))))
# Number of questions answered
dat.resp %>% filter(sum==0) %>% nrow() #21611 people did not have a survey answer
dat.resp %>% filter(sum > 0) %>% select(sum) %>% summary() # 2469 individuals who did answer
setwd("~/Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression")
library(dplyr)
library(lme4)
source("BLR_func.R")
source("Data_generator.R")
## Unclustered simulation
set.seed(4)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n, J=1, sigma_v=1)
dat <- dat %>% select(-cluster, -V_j)
y <- as.matrix(dat %>% select(y))
x <- cbind(1,as.matrix(dat %>% select(-y)))
test.theta <- matrix(c(14.24,0.22,-0.07,-0.44),nrow=1)
source("BLR_func.R")
loglik(test.theta,y,x)
log_lik(test.theta,y,x)
# Run test
set.seed(3)
source("BLR_func.R")
n_iter <- 10000
burn_in <- 500
beta.init <- rep(0,ncol(dat))
jump_sigma <- c(0.25,0.2,0.01,0.01)
y <- as.matrix(dat %>% select(y))
x <- cbind(1,as.matrix(dat %>% select(-y)))
# Univariate logistic regression
lr <- glm(y ~ trt + age + bmi, family="binomial", data=dat)
summary(lr)
set.seed(4)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n, J=1, sigma_v=1)
dat <- dat %>% select(-cluster, -V_j)
# Univariate logistic regression
lr <- glm(y ~ trt + age + bmi, family="binomial", data=dat)
summary(lr)
library(dplyr)
library(lme4)
source("BLR_func.R")
source("Data_generator.R")
set.seed(4)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n, J=1, sigma_v=1)
dat <- dat %>% select(-cluster, -V_j)
# Univariate logistic regression
lr <- glm(y ~ trt + age + bmi, family="binomial", data=dat)
summary(lr)
# Initialize parameters
n_iter <- 10000
burn_in <- 500
beta.init <- rep(0,ncol(dat))
jump_sigma <- c(0.25,0.2,0.01,0.01)
y <- as.matrix(dat %>% select(y))
x <- cbind(1,as.matrix(dat %>% select(-y)))
# Run test
set.seed(3)
source("BLR_func.R")
run1 <- MHu(y, x, beta.init, jump_sigma, n_iter, burn_in)
run1 <- MH.u(y, x, beta.init, jump_sigma, n_iter, burn_in)
run1
source("BLR_func.R")
run1 <- MH.u(y, x, beta.init, jump_sigma, n_iter, burn_in)
run1
tail(run1)
set.seed(3)
source("BLR_func.R")
run1 <- MH.u(y, x, beta.init, jump_sigma, n_iter, burn_in)
tail(run1)
set.seed(3)
source("BLR_func.R")
run1 <- MH.u(y, x, beta.init, jump_sigma, n_iter, burn_in)
tail(run1)
apply(run1,2,mean)
# Initialize parameters
n_iter <- 50000
burn_in <- 5000
run1 <- MH.u(y, x, beta.init, jump_sigma, n_iter, burn_in)
apply(run1,2,mean)
ptm <- proc.time()
run1 <- MH.r(y, x, beta.init, jump_sigma, n_iter, burn_in)
R.time <- proc.time() - ptm
ptm <- proc.time()
run1 <- MH.r(y, x, beta.init, jump_sigma, n_iter, burn_in)
R.time <- proc.time() - ptm
source("BLR_func.R")
ptm <- proc.time()
run1 <- MH.r(y, x, beta.init, jump_sigma, n_iter, burn_in)
R.time <- proc.time() - ptm
ptm <- proc.time()
run1 <- MH.u(y, x, beta.init, jump_sigma, n_iter, burn_in)
cpp.time <- proc.time() - ptm
cpp.time
R.time
apply(run1,2,mean)
n_iter <- 100000
burn_in <- 5000
ptm <- proc.time()
run1 <- MH.u(y, x, beta.init, jump_sigma, n_iter, burn_in)
cpp.time <- proc.time() - ptm
ptm <- proc.time()
run1 <- MH.r(y, x, beta.init, jump_sigma, n_iter, burn_in)
R.time <- proc.time() - ptm
cpp.time
R.time
source("BLR_func.R")
ptm <- proc.time()
run1 <- MH.u(y, x, beta.init, jump_sigma, n_iter, burn_in)
cpp.time <- proc.time() - ptm
cpp.time
library(dplyr)
library(lme4)
source("BLR_func.R")
source("Data_generator.R")
## Unclustered simulation
set.seed(4)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n, J=1, sigma_v=1)
dat <- dat %>% select(-cluster, -V_j)
# Univariate logistic regression
lr <- glm(y ~ trt + age + bmi, family="binomial", data=dat)
summary(lr)
# Initialize parameters
n_iter <- 100000
burn_in <- 10000
beta.init <- rep(0,ncol(dat))
jump_sigma <- c(0.25,0.2,0.01,0.01)
y <- as.matrix(dat %>% select(y))
x <- cbind(1,as.matrix(dat %>% select(-y)))
# Run test
ptm <- proc.time()
run1 <- MH.u(y, x, beta.init, jump_sigma, n_iter, burn_in)
cpp.time <- proc.time() - ptm
ptm <- proc.time()
run1 <- MH.r(y, x, beta.init, jump_sigma, n_iter, burn_in)
R.time <- proc.time() - ptm
cpp.time
R.time
run2 <- MH.u(y, x, beta.init+runif(1,-0.5,0.5), jump_sigma, n_iter, burn_in)
run3 <- MH.u(y, x, beta.init+runif(1,-1,1), jump_sigma, n_iter, burn_in)
# Compare coefficient estimates
data.frame(LR=coefficients(lr), MCMC1=apply(run1,2,mean),
MCMC2=apply(run2,2,mean), MCMC3=apply(run3,2,mean))
par(mfrow=c(2,2))
plot(1:n_iter, run1[,1], type="l", xlab="Iteration", ylab="Beta_hat", main="Intercept")
lines(1:n_iter, run2[,1], col="red")
lines(1:n_iter, run3[,1], col="blue")
plot(1:n_iter, run1[,2], type="l", xlab="Iteration", ylab="Beta_hat", main="Trt")
lines(1:n_iter, run2[,2], col="red")
lines(1:n_iter, run3[,2], col="blue")
plot(1:n_iter, run1[,3], type="l", xlab="Iteration", ylab="Beta_hat", main="Age")
lines(1:n_iter, run2[,3], col="red",)
lines(1:n_iter, run3[,3], col="blue")
plot(1:n_iter, run1[,4], type="l", xlab="Iteration", ylab="Beta_hat", main="BMI")
lines(1:n_iter, run2[,4], col="red")
lines(1:n_iter, run3[,4], col="blue")
n_iter
run1[,1]
plot(1:n_iter, run1[,1], type="l", xlab="Iteration", ylab="Beta_hat", main="Intercept")
lines(1:n_iter, run2[,1], col="red")
lines(1:n_iter, run3[,1], col="blue")
plot(1:n_iter, run1[,2], type="l", xlab="Iteration", ylab="Beta_hat", main="Trt")
lines(1:n_iter, run2[,2], col="red")
lines(1:n_iter, run3[,2], col="blue")
plot(1:n_iter, run1[,3], type="l", xlab="Iteration", ylab="Beta_hat", main="Age")
lines(1:n_iter, run2[,3], col="red",)
lines(1:n_iter, run3[,3], col="blue")
plot(1:n_iter, run1[,4], type="l", xlab="Iteration", ylab="Beta_hat", main="BMI")
lines(1:n_iter, run2[,4], col="red")
lines(1:n_iter, run3[,4], col="blue")
# Potential scale reduction - rule of thumb is 1.1
ptr <- mcmc.list(mcmc(run1), mcmc(run2), mcmc(run3))
gelman.diag(ptr)
# Potential scale reduction - rule of thumb is 1.1
library(coda)
install.packages(coda)
install.packages("coda")
library(coda)
ptr <- mcmc.list(mcmc(run1), mcmc(run2), mcmc(run3))
gelman.diag(ptr)
gelman.diag(ptr)
source("Helper Files/BLR_Data_Gen")
setwd("~/Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression")
source("Helper Files/BLR_Data_Gen")
source("Helper Files/BLR_Data_Gen.R")

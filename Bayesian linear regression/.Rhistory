library(MCMCpack)
library(tidyverse)
data.table::data.table(y=sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
data.frame(sample(c(0,1), n, replace=TRUE))
sample(c(0,1), n, replace=TRUE)
# Generate simple data set
set.seed(3)
n <- 1000
data.frame(sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
data.frame(y=sample(c(0,1), n, replace=TRUE))
dat <- data.frame(y=sample(c(0,1), n, replace=TRUE))
dat
head(dat)
dat %>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
dat %<>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
dat <- dat %>% mutate(trt=ifelse(y==1, rbinom(1,1,0.7), rbinom(1,1,0.6)))
dat
dat$trt
dat$y
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
library(MCMCpack)
# Generate simple data set
set.seed(3)
n <- 1000
y <- sample(c(0,1), n, replace=TRUE)
trt <- sapply(y, function(y_i){
ifelse(y_i==1, rbinom(1,1,0.7), rbinom(1,1,0.6))
})
age <- sapply(y, function(y_i){
ifelse(y_i==1, sample(20:60,1), sample(30:70,1))
})
dat <- data.frame(y,trt,age)
library(dplyr)
y.test <- dat %>% select(y)
x.test <- dat %>% select(-y)
x.test
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
theta.test <- c(2.81,0.36,-0.07)
log_lik(theta.test,y.test,x.test)
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
browser()
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
log_lik(theta.test,y.test,x.test)
a
b
y
x
b%*%as.matrix(x)
dim(b)
dim(x)
as.matrix(b)
dim(as.matrix(b))
dim(as.matrix(b, row=1))
dim(as.matrix(b, nrow=1))
dim(t(as.matrix(b))
)
# BLR implementation
# Logistic log likelihood
log_lik <- function(theta, y, x){
a <- theta[1]
b <- theta[-1]
browser()
p <- 1 - 1 / (1 + exp(a + b%*%x))
sum(dbinom(y, size=1, prob=p, log=TRUE))
}
log_lik(theta.test,y.test,x.test)
a
b
dim(x)
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
##**************##
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,],
getOR(fitAFT.SemiPara.V0)[2:3,]),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,],
getOR(fitAFT.SemiPara.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,],
getOR(fitAFT.SemiPara.V2)[2:3,]))
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
rbind(cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
cbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
cbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
library(survival)
library(xtable)
library(aftgee)
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
## Recode race and smoking to make the referent valued 0
##
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
##**************##
####QUESTION 4####
##**************##
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the three linear predictor models
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
summary(fitAFT.Exp.V1)
exp(0.14)
exp(-0.7357)
getOR(fitAFT.Weibull.V0)[2:3,]
getOR(fitAFT.Exp.V1)[2:3,]
cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,],
getOR(fitAFT.SemiPara.V0)[2:3,])
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
cbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,])
getOR(fitAFT.Exp.V0)[2:3,]
getOR(fitAFT.Weibull.V0)[2:3,]
#load a few functions that Sebastien created (optional)
source("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/00_Functions_Misc.q")
##Read in ACCESS data
access <- read.csv("~/Dropbox/BIO223/BST223_2022/Assignments/Midterm/ESRD_2022.csv")
access$raceGrp  <- access$raceGrp - 1
access$smokeGrp <- access$smokeGrp - 1
myForm.V0 <- as.formula(Surv(time, failure) ~ factor(type))
myForm.V1 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes))
myForm.V2 <- as.formula(Surv(time, failure) ~ factor(type)
+ female + factor(ageCat) + factor(raceGrp)
+ factor(bmiCat) + factor(smokeGrp) + factor(diabetes)
+ factor(calciumCat)
+ factor(phosphCat)
+ factor(hematoCat)
+ factor(albCat))
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
library(survival)
library(xtable)
library(aftgee)
# Fit the exponential
fitAFT.Exp.V0  <- survreg(myForm.V0, data=access, dist="exponential")
fitAFT.Exp.V1  <- survreg(myForm.V1, data=access, dist="exponential")
fitAFT.Exp.V2  <- survreg(myForm.V2, data=access, dist="exponential")
# Fit the Weibull
fitAFT.Weibull.V0  <- survreg(myForm.V0, data=access, dist="weibull")
fitAFT.Weibull.V1  <- survreg(myForm.V1, data=access, dist="weibull")
fitAFT.Weibull.V2  <- survreg(myForm.V2, data=access, dist="weibull")
cbind(rbind(getOR(fitAFT.Exp.V0)[2:3,],
getOR(fitAFT.Weibull.V0)[2:3,]
),
rbind(getOR(fitAFT.Exp.V1)[2:3,],
getOR(fitAFT.Weibull.V1)[2:3,]),
rbind(getOR(fitAFT.Exp.V2)[2:3,],
getOR(fitAFT.Weibull.V2)[2:3,]))
fitAFT.Exp.V1
getOR(fitAFT.Exp.V1)
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Convert to hazard ratio scale
calcHR <- function(val, scale){
round(exp(-val/scale),2)
}
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Exponential VTF - partially adjusted
calcHR(log(0.48),1)
calcHR(log(0.33),1)
calcHR(log(0.70),1)
getOR(fitAFT.Weibull.V1)
calcHR(log(0.43), fitAFT.Weibull.V1$scale)
calcHR(log(0.27), fitAFT.Weibull.V1$scale)
calcHR(log(0.68), fitAFT.Weibull.V1$scale)
calcHR(log(1.15), fitAFT.Weibull.V1$scale)
calcHR(log(0.81), fitAFT.Weibull.V1$scale)
calcHR(log(1.64), fitAFT.Weibull.V1$scale)
# Exponential standard fistula - partially adjusted
calcHR(log(1.15),1)
calcHR(log(0.86),1)
calcHR(log(1.54),1)
# Exponential VTF - partially adjusted
calcHR(log(0.48),1)
calcHR(log(0.33),1)
calcHR(log(0.70),1)
# Weibull standard fistula - partially adjusted
calcHR(log(1.15), fitAFT.Weibull.V1$scale)
calcHR(log(0.81), fitAFT.Weibull.V1$scale)
calcHR(log(1.64), fitAFT.Weibull.V1$scale)
# Weibull VTF - partially adjusted
calcHR(log(0.43), fitAFT.Weibull.V1$scale)
calcHR(log(0.27), fitAFT.Weibull.V1$scale)
calcHR(log(0.68), fitAFT.Weibull.V1$scale)
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
r
version
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
install.packages("RcppArmadillo")
require(RcppArmadillo)
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
install.packages("RcppAramdillo")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
Rcpp::sourceCpp("Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression/BLR_func.cpp")
# Read in data
read.csv("/Users/jonathanluu/Dropbox/Caring Health/Data/CHC_SDOH_dataset_1.5.22_SFTPupload.csv")
# Read in data
dat <- read.csv("/Users/jonathanluu/Dropbox/Caring Health/Data/CHC_SDOH_dataset_1.5.22_SFTPupload.csv")
head(Dat)
head(dat)
unique(dat$PAT_ID)
library(dplyr)
unique(dat$PAT_ID) %>% length()
head(dat)
# Number of individuals
dat$PAT_ID %>% unique() %>% length()
# Age
dat$Age %>% summary()
dat$Age %>% hist()
dat$Age %>% hist(main="Histogram of age (years)", xlab="Age")
dat$Age %>% hist(main="Histogram of age", xlab="Age (years)")
head(dat)
# Language
dat$Language %>% table()
# Language
dat$Language %>% unique()
dat$Language %>% table() %>% sort()
head(dat)
Data(dat)
View(dat)
unique(dat$FLO_MEAS_ID)
unique(dat$FLO_MEAS_NAME)
dat$PAT_ID %>% table() %>% sort()
dat$PAT_ID %>% table() %>% sort() %>% tail()
dat$DOMAIN_GRP %>% unique
dat %>% distinct()
dat %>% distinct(id)
dat %>% distinct(PAT_ID)
dat %>% distinct(PAT_ID, .keep_all = T)
dat %>% distinct(PAT_ID, .keep_all = T)
# Number of individuals
dat.distinct %>% nrow()
dat.distinct <- dat %>% distinct(PAT_ID, .keep_all = T)
# Number of individuals
dat.distinct %>% nrow()
# Number of individuals
dat$PAT_ID %>% unique() %>% length()
# Number of individuals
dat.distinct %>% nrow()
# Age
dat.distinct$Age %>% summary()
dat.distinct$Age %>% hist(main="Histogram of age", xlab="Age (years)")
# Language
dat.distinct$Language %>% unique()
dat.distinct$Language %>% table() %>% sort()
dat.distinct$Language %>% table() %>% sort() %>% tail()
dat.distinct$Language %>% table() %>% sort(decreasing = T) %>% head()
dat.distinct$Language %>% table() %>% sort(decreasing = T) %>% head()
head(dat.distinct)
# Race
dat.distinct$Race %>% unique()
dat.distinct$Race %>% table() %>% sort(decreasing = T)
# Race
dat.distinct$Race %>% table() %>% sort(decreasing = T)
# Race
dat.distinct$Race %>% table() %>% sort(decreasing = T)
# Language
dat.distinct$Language %>% unique() %>% length()
dat.distinct$Language %>% table() %>% sort(decreasing = T) %>% head()
# Race
dat.distinct$Race %>% table() %>% sort(decreasing = T)
head(Dat)
head(dat.distinct)
# Interpreter
dat.distinct$Interpreter %>% table()
# Number of visits
dat.distinct$Num_Visits %>% summary()
dat.distinct$Num_Visits %>% hist()
dat.distinct$Num_Visits %>% hist(ylim=100)
dat.distinct$Num_Visits %>% hist(ylim=c(0,100))
dat.distinct$Num_Visits %>% hist(xlim=c(0,100))
dat.distinct$Num_Visits %>% hist(xlim=c(0,10))
help(hist)
dat.distinct$Num_Visits %>% hist(xlim=c(0,10), breaks=1:10)
dat.distinct$Num_Visits %>% hist(xlim=c(0,10), breaks=1:15)
dat.distinct$Num_Visits %>% hist(xlim=c(0,10), breaks=0:15)
dat.distinct$Num_Visits %>% hist(xlim=c(0,10), breaks=0:max(dat.distinct$Num_Visits))
dat.distinct$Num_Visits %>% hist(xlim=c(0,20), breaks=0:max(dat.distinct$Num_Visits))
dat.distinct %>% filter(Num_Visits < 20)
dat.distinct %>% select(Num_Visits < 20)
dat.distinct %>% filter(Num_Visits < 20)
dat.distinct %>% filter(Num_Visits < 20) %>% select(Num_Visits )%>% hist(breaks=0:20)
dat.distinct %>% filter(Num_Visits < 20) %>% select(Num_Visits)
dat.distinct %>% filter(Num_Visits < 20) %>% select(Num_Visits) %>% hist(breaks=0:20)
dat.distinct %>% filter(Num_Visits < 20) %>% pluck(Num_Visits)
dat.distinct %>% filter(Num_Visits < 20) %>% pull(Num_Visits)
dat.distinct %>% filter(Num_Visits < 20) %>% pull(Num_Visits) %>% hist(breaks=0:20)
dat.distinct %>% filter(Num_Visits <= 20) %>% pull(Num_Visits) %>% hist(breaks=0:20)
dat.distinct %>% filter(Num_Visits <= 20) %>% pull(Num_Visits) %>% hist(breaks=0:20, main=Histogram of number of visits)
dat.distinct %>% filter(Num_Visits <= 20) %>% pull(Num_Visits) %>% hist(breaks=0:20, main="Histogram of number of visits")
dat.distinct %>% filter(Num_Visits <= 20) %>% pull(Num_Visits) %>% hist(breaks=0:20, main="Histogram of number of visits", xlab="Number of visits")
dat.distinct %>% filter(Num_Visits <= 20) %>% pull(Num_Visits) %>%
hist(breaks=0:20, main="Histogram of number of visits", xlab="Number of visits")
head(dat.distinct)
# Questions
dat$FLO_MEAS_ID %>% unique()
# Questions
dat$FLO_MEAS_ID %>% unique() %>% length()
dat$FLO_MEAS_NAME %>% unique()
dat$DOMAIN_GRP %>% unique
dat$DOMAIN_GRP %>% unique()
dat$PAT_ID %>% table() %>% sort(decreasing = T) %>% head()
dat %>% filter(PAT_ID == Z3347793)
dat %>% filter(PAT_ID == "Z3347793")
dat %>% filter(PAT_ID == "Z3347793") %>% select(PAT_ID, FLO_MEAS_ID)
dat %>% filter(PAT_ID == "Z3347793") %>% select(PAT_ID, FLO_MEAS_ID, FLO_MEAS_NAME, DOMAIN_GRP, MEAS_DISP_NAME, RESPONSE)
dat %>% filter(PAT_ID == "Z3347793") %>% select(PAT_ID, FLO_MEAS_ID, FLO_MEAS_NAME, DOMAIN_GRP, MEAS_DISP_NAME, RESPONSE)
dat %>% filter(PAT_ID == "Z3347793") %>% View()
# Filter by response category
dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP)
dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP)
dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>% count(DOMAIN_GRP)
dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>% count(PAT_ID, DOMAIN_GRP)
# Filter by response category
dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>% count(PAT_ID, DOMAIN_GRP) %>% filter(DOMAIN_GRP != "")
# Filter by response category
dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>% count(PAT_ID, DOMAIN_GRP) %>% filter(DOMAIN_GRP != "")
# Filter by response category
dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>% count(PAT_ID, DOMAIN_GRP) %>% filter(DOMAIN_GRP != "") %>% spread(DOMAIN_GRP, n)
library(tidyverse)
library(dplyr)
install.packages("tidyverser")
install.packages("tidyverse")
library(tidyr)
# Filter by response category
dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>% count(PAT_ID, DOMAIN_GRP) %>% filter(DOMAIN_GRP != "") %>% pivot_wider(names_from = DOMAIN_GRP, values_from = n)
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>% count(PAT_ID, DOMAIN_GRP) %>% filter(DOMAIN_GRP != "") %>% pivot_wider(names_from = DOMAIN_GRP, values_from = n)
# Filter by response category
dat.resp <- dat %>% select(PAT_ID, FLO_MEAS_ID, DOMAIN_GRP) %>% count(PAT_ID, DOMAIN_GRP) %>% filter(DOMAIN_GRP != "") %>% pivot_wider(names_from = DOMAIN_GRP, values_from = n)
dat.resp
dat.resp[1:30,]
View(dat.resp)
dat.resp
dat.resp$`Food Insecurity` %>% summary()
dat.resp %>% summary()
library(dplyr)
library(lme4)
source("BLR_func.R")
source("Data_generator.R")
setwd("~/Library/CloudStorage/OneDrive-HarvardUniversity/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression")
source("BLR_func.R")
source("Data_generator.R")
set.seed(3)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n, J=1, sigma_v=1)
dat <- dat %>% select(-cluster, -V_j)
set.seed(3)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n, J=1, sigma_v=1)
dat <- dat %>% select(-cluster, -V_j)
# Univariate logistic regression
lr <- glm(y ~ trt + age + bmi, family="binomial", data=dat)
summary(lr)
head(dat)

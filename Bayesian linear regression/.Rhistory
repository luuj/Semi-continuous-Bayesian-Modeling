setwd("C:/Users/Jonathan/OneDrive - Harvard University/GitHub/Semi-continuous-Bayesian-Modeling/Bayesian linear regression")
library(dplyr)
library(lme4)
source("BLR_func.R")
source("BLR_func_cluster.R")
source("Data_generator.R")
set.seed(3)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n, J=1, sigma_v=1)
dat <- dat %>% select(-cluster, -V_j)
# Univariate logistic regression
lr <- glm(y ~ trt + age + bmi, family="binomial", data=dat)
summary(lr)
# Initialize parameters
n_iter <- 70000
burn_in <- 5000
beta.init <- rep(0,ncol(dat))
jump_sigma <- c(0.25,0.2,0.01,0.01)
y <- dat %>% select(y)
x <- dat %>% select(-y)
# Run test
set.seed(3)
run1 <- MH.u(y, x, beta.init, jump_sigma, n_iter, burn_in)
run2 <- MH.u(y, x, beta.init+runif(1,-0.5,0.5), jump_sigma, n_iter, burn_in)
run3 <- MH.u(y, x, beta.init+runif(1,-1,1), jump_sigma, n_iter, burn_in)
# Compare coefficient estimates
coef1 <- run1$coef
coef2 <- run2$coef
coef3 <- run3$coef
data.frame(LR=coefficients(lr), MCMC1=apply(coef1,2,mean),
MCMC2=apply(coef2,2,mean), MCMC3=apply(coef3,2,mean))
data.frame(LR=coefficients(lr), MCMC1=apply(coef1,2,mean),
MCMC2=apply(coef2,2,mean), MCMC3=apply(coef3,2,mean))
set.seed(3)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n_j, J=J, sigma_v=0.5)
dat.cl <- dat.cl %>% select(-V_j)
# GLMM
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
# Initialize parameters
n_iter <- 70000
burn_in <- 5000
theta.init <- rep(0,ncol(dat.cl)+J)
gamma.init <- c(1,1)
jump_sigma <- c(0.25,0.2,0.01,0.01,rep(0.2, J),0.2)
y <- dat.cl %>% select(y)
x <- dat.cl %>% select(-y)
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
j
prev_theta
prev_theta[index_vk]
prop_theta[1:num_total-2]
beta_prop
prop_theta
prev_theta
prop_theta[index_beta]
vk <- prev_theta[index_vk]
beta_prop <- prop_theta[index_beta]
beta_prev <- prev_theta[index_beta]
log_prop <- log_lik.beta(beta_prop, y, x, vk)
log_prev <- log_lik.beta(beta_prev, y, x, vk)
log_prop
log_prev
log_prev
log_prop
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
log_ratio
prop_theta
theta_hat
head(theta_hat)
theta_hat[i,] <- prop_theta
head(theta_hat)
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
head(theta_hat)
head(theta_hat)
rnorm(1,0,jump_sigma)
jump_sigma
rnorm(num_total,0,jump_sigma)
replicate(100,rnorm(num_total,0,jump_sigma))
apply(replicate(100,rnorm(num_total,0,jump_sigma)),2,sd)
apply(replicate(100,rnorm(num_total,0,jump_sigma)),1,sd)
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
theta_hat[i,1:j-1]theta_hat[i,1:(j-1)]
theta_hat[i,1:(j-1)]
theta_hat[i-1,j:num_total]
c(theta_hat[i,1:(j-1)], theta_hat[i-1,j:num_total])
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
prev_theta <- prop_theta <- theta_hat[i,]
prev_theta
prop_theta
j:num_total
theta_hat[i-1,j:num_total]
prop_theta[j:num_total] <- theta_hat[i-1,j:num_total]
prev_theta[j:num_total] <- prop_theta[j:num_total] <- theta_hat[i-1,j:num_total]
prop_theta[j] <- proposal_theta_j
proposal_theta_j
prop_theta
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
prop_theta
prev_theta
prop_theta
prev_theta
prop_theta
prev_theta
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
prop_theta
prev_theta
j
prop_theta
prop_theta[index_beta]
prop_theta[index_vk]
prev_theta[index_vk]
prev_theta[num_total]
j
index_vk
help(where)
help(which)
which(index_vk)
which (j==index_vk)
which (6==index_vk)
which (7==index_vk)
which (10==index_vk)
which (8==index_vk)
theta.init <- c(rep(0,ncol(dat.cl)+J-1),1)
theta.init <- c(rep(0,ncol(dat.cl)+J-1),1)
theta.init
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
beta <- prop_theta[index_beta]
vk_prop <- prop_theta[index_vk]
vk_prev <- prev_theta[index_vk]
sv <- prev_theta[index_sigma]
beta
vk_prop
vk_prev
sv
# Subset y and x for cluster k
curr_cluster <- which (j==index_vk)
curr_cluster
cluster_index
index_cluster
index_cluster==curr_cluster
x[index_cluster==curr_cluster]
x
x[index_cluster==curr_cluster]
index_cluster==curr_cluster
sum(index_cluster==curr_cluster)
x
x[index_cluster==curr_cluster,]
y[index_cluster==curr_cluster]
vk_prop <- prop_theta[j]
vk_prev <- prev_theta[j]
vk_prop
vk_prev
## Update Vk terms
beta <- prop_theta[index_beta]
vk_prop <- prop_theta[j]
vk_prev <- prev_theta[j]
sv <- prev_theta[index_sigma]
# Subset y and x for cluster k
curr_cluster <- which (j==index_vk)
curr_x <- x[index_cluster==curr_cluster,]
curr_y <- y[index_cluster==curr_cluster]
# Calculate log posterior probability of proposed and previous
log_prop <- log_lik.vk(beta, curr_y, curr_x, vk_prop, sv)
log_prev <- log_lik.vk(beta, curr_y, curr_x, vk_prev, sv)
log_prop
log_prev
prop_theta[index_vk]
num_cluster
# Initialize parameters
n_iter <- 9000
burn_in <- 1000
theta.init <- c(rep(0,ncol(dat.cl)+J-1),1)
gamma.init <- c(1,1)
jump_sigma <- c(0.25,0.2,0.01,0.01,rep(0.2, J),0.2)
y <- dat.cl %>% select(y)
x <- dat.cl %>% select(-y)
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
sv_prop
sv_prev
curr_vk
j
log_lik.sv(sv_prop, curr_vk, num_cluster, gamma_init[1], gamma_init[2])
log_prop <- log_lik.sv(sv_prop, curr_vk, num_cluster, gamma_init[1], gamma_init[2])
log_prev <- log_lik.sv(sv_prev, curr_vk, num_cluster, gamma_init[1], gamma_init[2])
log_prop
log_prev
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
run1
apply(run1,2,mean)
dat.cl
set.seed(3)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n_j, J=J, sigma_v=0.5)
dat.cl
unique(dat.cl$vk)
unique(dat.cl$V_j)
apply(run1,2,mean)
source("BLR_func.R")
stored_vk <- logit(unique(dat.cl$V_j))
unique(dat.cl$V_j)
head(run1)
tail(run1)
theta.init <- c(rep(0,ncol(dat.cl)+J-1),0.5)
# Initialize parameters
n_iter <- 30000
burn_in <- 3000
# Initialize parameters
n_iter <- 30000
burn_in <- 3000
theta.init <- c(rep(0,ncol(dat.cl)+J-1),0.5)
gamma.init <- c(1,1)
jump_sigma <- c(0.25,0.2,0.01,0.01,rep(0.2, J),0.2)
y <- dat.cl %>% select(y)
x <- dat.cl %>% select(-y)
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
apply(run1,2,mean)
n_iter
tail(run1)
apply(run1,2,mean)
stored.vk
stored.vk <- unique(dat.cl$V_j)
stored.vk
theta.init
dat.cl
set.seed(3)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), x=design_matrix, n_j=n_j, J=J, sigma_v=0.5)
stored.vk <- unique(dat.cl$V_j)
dat.cl <- dat.cl %>% select(-V_j)
dat.cl
# Initialize parameters
n_iter <- 30000
burn_in <- 3000
theta.init <- c(rep(0,ncol(dat.cl)+J-1),0.5)
gamma.init <- c(1,1)
jump_sigma <- c(0.25,0.2,0.01,0.01,rep(0.2, J),0.2)
y <- dat.cl %>% select(y)
x <- dat.cl %>% select(-y)
theta.init
# Initialize parameters
n_iter <- 50000
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, n_iter, burn_in)
apply(run1,2,mean)
stored.vk

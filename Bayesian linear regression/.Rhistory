lines(1:num_iter, coef3[,4], col="blue")
run3 <- MH.u(y, x, theta.init+runif(1,-1,1), sigma.jump, num_iter, burn_in)
coef3 <- run3$coef
data.frame(LR=coefficients(lr), MCMC1=apply(coef1,2,mean),
MCMC2=apply(coef2,2,mean), MCMC3=apply(coef3,2,mean))
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=10, sigma_v=3)
dat.cl
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=10, sigma_v=4)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
library(dplyr)
#library(coda)
library(lme4)
source("BLR_func.R")
## Generate simple data set
# param = beta coefficients
# n = number of observations
# n_cluster = number of clusters
# sigma_v = variance of random effect distribution
gen_data <- function(param, n, n_cluster, sigma_v){
# Generate covariates
age <- sample(20:70,n,replace=TRUE)
trt <- rbinom(n,1,0.5)
bmi <- rnorm(n,28,4)
x <- data.frame(1,trt,age,bmi)
cluster <- rep(1:n_cluster, each=n/n_cluster)
# Generate outcome
if (n_cluster > 1){
vk <- rnorm(n_cluster,0,sigma_v)
pi <- expit(as.matrix(x)%*%as.matrix(param) + rep(vk, each=n/n_cluster)) # Random intercept
}else{
pi <- expit(as.matrix(x)%*%as.matrix(param))
}
y <- rbinom(n,1,pi)
data.frame(y,trt,age,bmi,cluster)
}
set.seed(3)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=1, sigma_v=3)
dat <- dat %>% select(-cluster)
lr <- glm(y ~ trt + age + bmi, family="binomial", data=dat)
summary(lr)
# Initialize parameters
num_iter <- 70000
burn_in <- 5000
num_var <- ncol(dat)
theta.init <- rep(0,num_var)
sigma.jump <- c(0.25,0.2,0.01,0.01)
y <- as.matrix(dat %>% select(y))
x <- as.matrix(dat %>% select(-y))
# Run test
set.seed(3)
run1 <- MH.u(y, x, theta.init, sigma.jump, num_iter, burn_in)
run2 <- MH.u(y, x, theta.init+runif(1,-0.5,0.5), sigma.jump, num_iter, burn_in)
run3 <- MH.u(y, x, theta.init+runif(1,-1,1), sigma.jump, num_iter, burn_in)
# Compare coefficient estimates
coef1 <- run1$coef
coef2 <- run2$coef
coef3 <- run3$coef
data.frame(LR=coefficients(lr), MCMC1=apply(coef1,2,mean),
MCMC2=apply(coef2,2,mean), MCMC3=apply(coef3,2,mean))
# Potential scale reduction - rule of thumb is 1.1
ptr <- mcmc.list(mcmc(coef1), mcmc(coef2), mcmc(coef3))
gelman.diag(ptr)
### Clustered simulation
set.seed(3)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=10, sigma_v=4)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
install.packages("NormalGamma")
# BLR clustered implementation
library(NormalGamma)
help("dnormgam")
dat.cl
### Clustered simulation
set.seed(3)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=10, sigma_v=4)
dat.cl
# Initialize parameters
dat.cl <- dat.cl %>% select(-cluster)
dat.cl
beta.init <- rep(0,ncol(dat.cl)+2)
beta.init
sigma.jump <- c(0.25,0.2,0.01,0.01,0.2,0.2)
sigma.jump
y <- as.matrix(dat.cl %>% select(y))
x <- as.matrix(dat.cl %>% select(-y))
gamma.init <- c(1,2)
library(dplyr)
library(lme4)
source("BLR_func.R")
source("BLR_func_cluster.R")
## Generate simple data set
# param = beta coefficients
# n = number of observations
# n_cluster = number of clusters
# sigma_v = variance of random effect distribution
gen_data <- function(param, n, n_cluster, sigma_v){
# Generate covariates
age <- sample(20:70,n,replace=TRUE)
trt <- rbinom(n,1,0.5)
bmi <- rnorm(n,28,4)
x <- data.frame(1,trt,age,bmi)
cluster <- rep(1:n_cluster, each=n/n_cluster)
# Generate outcome
if (n_cluster > 1){
vk <- rnorm(n_cluster,0,sigma_v)
pi <- expit(as.matrix(x)%*%as.matrix(param) + rep(vk, each=n/n_cluster)) # Random intercept
}else{
pi <- expit(as.matrix(x)%*%as.matrix(param))
}
y <- rbinom(n,1,pi)
data.frame(y,trt,age,bmi,cluster)
}
set.seed(3)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=10, sigma_v=4)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
dat.cl <- dat.cl %>% select(-cluster)
num_iter <- 70000
burn_in <- 5000
beta.init <- rep(0,ncol(dat.cl)+2)
gamma.init <- c(1,2)
jump_sigma <- c(0.25,0.2,0.01,0.01,0.2,0.2)
y <- as.matrix(dat.cl %>% select(y))
x <- as.matrix(dat.cl %>% select(-y))
set.seed(3)
run1 <- MH.c(y, x, beta.init, gamma.init, jump_sigma, num_iter, burn_in)
source("BLR_func_cluster.R")
# Run test
set.seed(3)
run1 <- MH.c(y, x, beta.init, gamma.init, jump_sigma, num_iter, burn_in)
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, beta.init, gamma.init, jump_sigma, num_iter, burn_in)
theta
dim(theta)
dim(x)
expit(x%*%theta + vk)
expit(as.matrxi(x)%*%theta + vk)
expit(as.matrix(x)%*%theta + vk)
expit(x%*%as.matrix(theta) + vk)
dim(as.matrix(theta))
dim(x)
num_beta
expit(x%*%theta[1:4])
theta[-2]
slice(theta,2)
slice(theta,1)
c(1,2,3,4,5,6) %>% select(1)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=10, sigma_v=4)
rnorm(0,0,1)
## Generate simple data set
# param = beta coefficients
# n = number of observations
# n_cluster = number of clusters
# sigma_v = variance of random effect distribution
gen_data <- function(param, n, n_cluster, sigma_v){
# Generate covariates
age <- sample(20:70,n,replace=TRUE)
trt <- rbinom(n,1,0.5)
bmi <- rnorm(n,28,4)
x <- data.frame(1,trt,age,bmi)
cluster <- rep(1:n_cluster, each=n/n_cluster)
vk <- 0
# Generate outcome
if (n_cluster > 1){
vk <- rnorm(n_cluster,0,sigma_v)
pi <- expit(as.matrix(x)%*%as.matrix(param) + rep(vk, each=n/n_cluster)) # Random intercept
}else{
pi <- expit(as.matrix(x)%*%as.matrix(param))
}
y <- rbinom(n,1,pi)
data.frame(y,trt,age,bmi,cluster,vk)
}
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=1, sigma_v=3)
dat
set.seed(3)
num_cluster <- 5
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=num_cluster, sigma_v=4)
dat.cl
rep(vk, each=n/n_cluster)
rep(c(1,2,3), each=5)
1000/5
rnorm(5,0,4)
rep(rnorm(5,0,4),each=5)
## Generate simple data set
# param = beta coefficients
# n = number of observations
# n_cluster = number of clusters
# sigma_v = variance of random effect distribution
gen_data <- function(param, n, n_cluster, sigma_v){
# Generate covariates
age <- sample(20:70,n,replace=TRUE)
trt <- rbinom(n,1,0.5)
bmi <- rnorm(n,28,4)
x <- data.frame(1,trt,age,bmi)
cluster <- rep(1:n_cluster, each=n/n_cluster)
vk <- 0
# Generate outcome
if (n_cluster > 1){
vk <- rep(rnorm(n_cluster,0,sigma_v), each=n/n_cluster)
pi <- expit(as.matrix(x)%*%as.matrix(param) + rep(vk, each=n/n_cluster)) # Random intercept
}else{
pi <- expit(as.matrix(x)%*%as.matrix(param))
}
y <- rbinom(n,1,pi)
data.frame(y,trt,age,bmi,cluster,vk)
}
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=num_cluster, sigma_v=4)
## Generate simple data set
# param = beta coefficients
# n = number of observations
# n_cluster = number of clusters
# sigma_v = variance of random effect distribution
gen_data <- function(param, n, n_cluster, sigma_v){
# Generate covariates
age <- sample(20:70,n,replace=TRUE)
trt <- rbinom(n,1,0.5)
bmi <- rnorm(n,28,4)
x <- data.frame(1,trt,age,bmi)
cluster <- rep(1:n_cluster, each=n/n_cluster)
vk <- 0
# Generate outcome
if (n_cluster > 1){
vk <- rep(rnorm(n_cluster,0,sigma_v), each=n/n_cluster)
pi <- expit(as.matrix(x)%*%as.matrix(param) + vk) # Random intercept
}else{
pi <- expit(as.matrix(x)%*%as.matrix(param))
}
y <- rbinom(n,1,pi)
data.frame(y,trt,age,bmi,cluster,vk)
}
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=num_cluster, sigma_v=4)
dat.cl
tail(dat.cl)
table(dat.cl$vk)
theta.init <- rep(0,ncol(dat.cl)+1+num_cluster)
theta.init
num_cluster <- 5
# Initialize parameters
dat.cl <- dat.cl %>% select(-cluster, vk)
dat.cl
dat.cl
# Initialize parameters
dat.cl <- dat.cl %>% select(-cluster, -vk)
dat.cl
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=num_cluster, sigma_v=4)
# Initialize parameters
dat.cl <- dat.cl %>% select(-cluster, -vk)
dat.cl
set.seed(3)
num_cluster <- 5
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=num_cluster, sigma_v=4)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
# Initialize parameters
dat.cl <- dat.cl %>% select(-cluster, -vk)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
set.seed(3)
num_cluster <- 5
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=num_cluster, sigma_v=4)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
# Initialize parameters
dat.cl <- dat.cl %>% select(-cluster, -vk)
num_iter <- 70000
burn_in <- 5000
theta.init <- rep(0,ncol(dat.cl)+1+num_cluster)
theta.init
gamma.init <- c(1,2)
rep(0.2, num_cluster)
jump_sigma <- c(0.25,0.2,0.01,0.01,rep(0.2, num_cluster),0.2)
jump_sigma
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=num_cluster, sigma_v=4)
# Initialize parameters
dat.cl <- dat.cl %>% select(-vk)
x <- as.matrix(dat.cl %>% select(-y))
x
x
unique(dat.cl$cluster)
length(unique(dat.cl$cluster))
# Metropolis-Hastings algorithm
# y - outcome values
# x - covariates
# beta.init - starting beta values for MH algorithm
# jump_sigma - variance for proposal distribution
# num_cluster - number of clusters
# num_iter - number of MH steps
# burn_in - number of iterations to remove for burn-in
MH.c <- function(y, x, theta_init, gamma_init, jump_sigma, num_iter, burn_in){
# Total # of iterations
total_iter <- num_iter + burn_in + 1
# Record cluster information
num_cluster <- length(unique(x$cluster))
index_cluster <- x$cluster
# Format x
x <- cbind(1,x) # append 1's to x for intercept term
x <- x %>% select(-cluster)
# Coefficient estimate storage - betas, vk, sigma_v
num_theta <- length(theta_init)
theta_hat <- matrix(NA, total_iter, num_theta)
theta_hat[1,] <- theta_init
browser()
# Run algorithm
for(i in 2:total_iter){
for(j in 1:num_theta){
# Generate a proposal theta using a normal distribution
proposal_theta_j <- theta_hat[i-1,j] + rnorm(1,0,jump_sigma[j])
# Store previous and proposal theta
prev_theta <- prop_theta <- theta_hat[i-1,]
prop_theta[j] <- proposal_theta_j
if (j <= num_theta-2){
## Update beta terms
vk <- prev_theta[num_theta-1]
beta_prop <- prop_theta[1:num_theta-2]
beta_prev <- prev_theta[1:num_theta-2]
# Calculate log posterior probability of proposed and previous
log_prop <- log_lik.beta(beta_prop, y, x, vk)
log_prev <- log_lik.beta(beta_prev, y, x, vk)
}else if (j == num_theta-1){
## Update Vk
beta <- prop_theta[1:num_theta-2]
vk_prop <- prop_theta[num_theta-1]
vk_prev <- prev_theta[num_theta-1]
sv <- prev_theta[num_theta]
# Calculate log posterior probability of proposed and previous
log_prop <- log_lik.vk(beta, y, x, theta_hat[i-1,num_theta-1], theta_hat[i-1,num_theta])
log_prev <- log_lik.vk(beta, y, x, theta_hat[i-1,num_theta-1], theta_hat[i-1,num_theta])
}else if (j == num_theta){
## Update sigma_v
log_prop <- log_lik.sv(prop_theta, y, gamma_init[1], gamma_init[2])
log_prev <- log_lik.sv(prev_theta, y, gamma_init[1], gamma_init[2])
}
# Calculate ratio
log_ratio <- log_prop - log_prev
# Flip coin to choose acceptance
if (log(runif(1)) < log_ratio){
theta_hat[i,] <- prop_theta
accept[1,j] <- accept[1,j] + 1
} else{
theta_hat[i,] <- theta_hat[i-1,]
}
}
}
theta_hat[(burn_in+2):total_iter,]
}
set.seed(3)
num_cluster <- 5
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=num_cluster, sigma_v=4)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
# Initialize parameters
dat.cl <- dat.cl %>% select(-vk)
num_iter <- 70000
burn_in <- 5000
theta.init <- rep(0,ncol(dat.cl)+1+num_cluster)
gamma.init <- c(1,2)
jump_sigma <- c(0.25,0.2,0.01,0.01,rep(0.2, num_cluster),0.2)
y <- as.matrix(dat.cl %>% select(y))
x <- as.matrix(dat.cl %>% select(-y))
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, num_iter, burn_in)
x
x %>% select(cluster)
library(dplyr)
library(lme4)
source("BLR_func.R")
set.seed(3)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=1, sigma_v=3)
dat <- dat %>% select(-cluster)
# Univariate logistic regression
lr <- glm(y ~ trt + age + bmi, family="binomial", data=dat)
summary(lr)
# Initialize parameters
num_iter <- 70000
burn_in <- 5000
beta.init <- rep(0,ncol(dat))
jump_sigma <- c(0.25,0.2,0.01,0.01)
y <- dat %>% select(y)
x <- dat %>% select(-y)
# Run test
set.seed(3)
run1 <- MH.u(y, x, beta.init, jump_sigma, num_iter, burn_in)
run2 <- MH.u(y, x, beta.init+runif(1,-0.5,0.5), jump_sigma, num_iter, burn_in)
run3 <- MH.u(y, x, beta.init+runif(1,-1,1), jump_sigma, num_iter, burn_in)
# Compare coefficient estimates
coef1 <- run1$coef
coef2 <- run2$coef
coef3 <- run3$coef
data.frame(LR=coefficients(lr), MCMC1=apply(coef1,2,mean),
MCMC2=apply(coef2,2,mean), MCMC3=apply(coef3,2,mean))
# Compare coefficient estimates
coef1 <- run1$coef
coef1
coef2 <- run2$coef
coef2
coef3 <- run3$coef
coef3
set.seed(3)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=1, sigma_v=3)
dat <- dat %>% select(-cluster, -vf)
dat
set.seed(3)
dat <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=1, sigma_v=3)
dat <- dat %>% select(-cluster, -vk)
dat
# Univariate logistic regression
lr <- glm(y ~ trt + age + bmi, family="binomial", data=dat)
summary(lr)
# Initialize parameters
num_iter <- 70000
burn_in <- 5000
beta.init <- rep(0,ncol(dat))
jump_sigma <- c(0.25,0.2,0.01,0.01)
y <- dat %>% select(y)
x <- dat %>% select(-y)
# Run test
set.seed(3)
run1 <- MH.u(y, x, beta.init, jump_sigma, num_iter, burn_in)
run2 <- MH.u(y, x, beta.init+runif(1,-0.5,0.5), jump_sigma, num_iter, burn_in)
run3 <- MH.u(y, x, beta.init+runif(1,-1,1), jump_sigma, num_iter, burn_in)
# Compare coefficient estimates
coef1 <- run1$coef
coef2 <- run2$coef
coef3 <- run3$coef
data.frame(LR=coefficients(lr), MCMC1=apply(coef1,2,mean),
MCMC2=apply(coef2,2,mean), MCMC3=apply(coef3,2,mean))
library(dplyr)
library(lme4)
source("BLR_func.R")
## Generate simple data set
# param = beta coefficients
# n = number of observations
# n_cluster = number of clusters
# sigma_v = variance of random effect distribution
gen_data <- function(param, n, n_cluster, sigma_v){
# Generate covariates
age <- sample(20:70,n,replace=TRUE)
trt <- rbinom(n,1,0.5)
bmi <- rnorm(n,28,4)
x <- data.frame(1,trt,age,bmi)
cluster <- rep(1:n_cluster, each=n/n_cluster)
vk <- 0
# Generate outcome
if (n_cluster > 1){
vk <- rep(rnorm(n_cluster,0,sigma_v), each=n/n_cluster)
pi <- expit(as.matrix(x)%*%as.matrix(param) + vk) # Random intercept
}else{
pi <- expit(as.matrix(x)%*%as.matrix(param))
}
y <- rbinom(n,1,pi)
data.frame(y,trt,age,bmi,cluster,vk)
}
### Clustered simulation
set.seed(3)
num_cluster <- 5
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=num_cluster, sigma_v=4)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
# Initialize parameters
dat.cl <- dat.cl %>% select(-vk)
num_iter <- 70000
burn_in <- 5000
theta.init <- rep(0,ncol(dat.cl)+1+num_cluster)
gamma.init <- c(1,2)
jump_sigma <- c(0.25,0.2,0.01,0.01,rep(0.2, num_cluster),0.2)
y <- dat.cl %>% select(y)
x <- dat.cl %>% select(-y)
# Run test
source("BLR_func_cluster.R")
set.seed(3)
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, num_iter, burn_in)
total_iter
num_cluster
index_cluster
x
y
num_theta
theta_init
num_theta
theta.init
dat.cl
theta.init <- rep(0,ncol(dat.cl)+num_cluster)
theta.init
run1 <- MH.c(y, x, theta.init, gamma.init, jump_sigma, num_iter, burn_in)
num_theta
head(theta-hat)
head(theta_hat)
help("dnormgam")
hist(rgamma(10000,1,1))
hist(rgamma(10000,1,1),nclass = 50)
hist(rgamma(10000,0.5,0.5),nclass = 50)
hist(rgamma(10000,2,2),nclass = 50)
mean(rgamma(10000,1,1))
var(rgamma(10000,1,1))
var(rgamma(10000,0.5,0.5))
### Clustered simulation
set.seed(3)
num_cluster <- 5
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=num_cluster, sigma_v=4)
dat.cl
tail(dat.cl)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
expit(0)
expit(-4)
expit(4)
expit(-8)
expit(8)
expit(1.5)
expit(-1.5)
dat.cl <- gen_data(param=c(14.24,0.22,-0.07,-0.44), n=1000, n_cluster=num_cluster, sigma_v=0.5)
glmer(y ~ trt + age + bmi + (1 | cluster), family="binomial", data=dat.cl)
mean(dat.cl$y)
help("dnormgam")

Nre
dat$clst
as.numeric(dat$clst)
Nre <- length(unique(re))
Nre
##### Main #####
dat <- read.csv("dat.csv")
dat
set.seed(3)
n_k <- 20 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
source("likelihood.R")
source("gendata.R")
source("jags.R")
##### Create dataset #####
set.seed(3)
n_k <- 20 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
source("likelihood.R")
source("gendata.R")
source("jags.R")
##### Create dataset #####
set.seed(3)
n_k <- 20 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
truth_coef <- c(alphay=-1.5, betay=1.3, gammay=0.8,
alpham=1, betam=3, shape=2,
alphad=-2.5, betad=-0.5, gammad=-1.3)
truth_cre <- data.frame(V1=unique(dat$V1), V2=unique(dat$V2), Vmu=unique(dat$Vmu))
# Run algorithm
results <- GS(dat=dat)
dat
source("jags.R")
# Run algorithm
results <- GS(dat=dat)
par <- c("alphay", "betay", "gammay","alpham", "betam", "shape", "alphad", "betad", "gammad")
par
model.data <- list(
y1 <- dat.in$y1,
y2 <- dat.in$y2,
y_prev <- dat.in$y1_prev,
x <- dat.in$trt,
N <- length(y1),
cost <- dat.dist$cost,
x2 <- dat.dist$trt,
N2 <- nrow(dat.dist)
)
dat.in <- dat
model.data <- list(
y1 <- dat.in$y1,
y2 <- dat.in$y2,
y_prev <- dat.in$y1_prev,
x <- dat.in$trt,
N <- length(y1),
cost <- dat.dist$cost,
x2 <- dat.dist$trt,
N2 <- nrow(dat.dist)
)
dat.dist <- dat.in %>% distinct(cost, .keep_all=T) %>% filter(cost>0)
model.data <- list(
y1 <- dat.in$y1,
y2 <- dat.in$y2,
y_prev <- dat.in$y1_prev,
x <- dat.in$trt,
N <- length(y1),
cost <- dat.dist$cost,
x2 <- dat.dist$trt,
N2 <- nrow(dat.dist)
)
model.data
par <- c("alphay", "betay", "gammay","alpham", "betam", "shape", "alphad", "betad", "gammad")
mod <- R2jags::jags.parallel(data = model.data,
parameters.to.save = par, model.file = m1,
n.chains=3, n.iter=3000)
# Binary estimation - Probability of accruing a cost
m1 <- function(){
# Priors:
alphay ~ dnorm(0, 0.0001) # mean, precision = N(0, 10^4)
betay ~ dnorm(0, 0.0001)
gammay ~ dnorm(0, 0.0001)
alpham ~ dnorm(0, 0.0001)
betam ~ dnorm(0, 0.0001)
shape ~ dunif(0, 100)
alphad ~ dnorm(0, 0.0001)
betad ~ dnorm(0, 0.0001)
gammad ~ dnorm(0, 0.0001)
# Likelihood data model:
for (i in 1:N) {
lp1[i] <- alphay + betay * x[i] + gammay * y_prev[i]
y1[i] ~ dbern(ilogit(lp1[i]))
lp3[i] <- alphad + betad * x[i] + gammad * y_prev[i]
y2[i] ~ dbern(ilogit(lp3[i]))
}
}
mod <- R2jags::jags.parallel(data = model.data,
parameters.to.save = par, model.file = m1,
n.chains=3, n.iter=3000)
alphay ~ dnorm(0, 0.0001) # mean, precision = N(0, 10^4)
betay ~ dnorm(0, 0.0001)
gammay ~ dnorm(0, 0.0001)
alpham ~ dnorm(0, 0.0001)
betam ~ dnorm(0, 0.0001)
shape ~ dunif(0, 100)
alphad ~ dnorm(0, 0.0001)
betad ~ dnorm(0, 0.0001)
gammad ~ dnorm(0, 0.0001)
model.data$N
model.data
dat.dist <- dat.in %>% distinct(cost, .keep_all=T) %>% filter(cost>0)
model.data <- list(
y1 = dat.in$y1,
y2 = dat.in$y2,
y_prev = dat.in$y1_prev,
x = dat.in$trt,
N = length(y1),
cost = dat.dist$cost,
x2 = dat.dist$trt,
N2 = nrow(dat.dist)
)
model.data
model.data$N
source("likelihood.R")
source("gendata.R")
source("jags.R")
set.seed(3)
n_k <- 20 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
truth_coef <- c(alphay=-1.5, betay=1.3, gammay=0.8,
alpham=1, betam=3, shape=2,
alphad=-2.5, betad=-0.5, gammad=-1.3)
truth_cre <- data.frame(V1=unique(dat$V1), V2=unique(dat$V2), Vmu=unique(dat$Vmu))
# Run algorithm
results <- GS(dat=dat)
dat
source("jags.R")
# Run algorithm
results <- GS(dat=dat)
results
# Results
coef_est <- unlist(c(results$model1$BUGSoutput$mean[-3], results$model2$BUGSoutput$mean[-3], results$model3$BUGSoutput$mean[-3]))
coef_names <- c("alphay","betay","gammay","alpham","betam","shape","alphad","betad","gammad")
tibble(Variable=coef_names, Truth=truth_coef, Est=coef_est)
# Results
coef_est <- unlist(c(results$model1$BUGSoutput$mean[-3], results$model2$BUGSoutput$mean[-3], results$model3$BUGSoutput$mean[-3]))
coef_names <- c("alphay","betay","gammay","alpham","betam","shape","alphad","betad","gammad")
tibble(Variable=coef_names, Truth=truth_coef, Est=coef_est)
results
results$BUGSoutput$mean
# Results
coef_est <- unlist(results$BUGSoutput$mean)
coef_est
tibble(Variable=coef_names, Truth=truth_coef, Est=coef_est)
# Results
coef_est <- unlist(results$BUGSoutput$mean)[-"deviance"]
# Results
coef_est <- unlist(results$BUGSoutput$mean)[-7]
coef_est
tibble(Variable=coef_names, Truth=truth_coef, Est=coef_est)
##### Main #####
dat <- read.csv("dat.csv")
dat
# Run algorithm
results <- GS(dat=dat)
results
# Results
coef_est <- unlist(results$BUGSoutput$mean)[-7]
coef_names <- c("alphay","betay","gammay","alpham","betam","shape","alphad","betad","gammad")
tibble(Variable=coef_names, Truth=truth_coef, Est=coef_est)
# Results
coef_est <- unlist(results$BUGSoutput$mean)[-7]
coef_est
truth_coef
merge(coef_est,truth_coef)
truth_coef[as.numeric(names(coef_est))]
truth_cre
truth_coef
results
# Results
coef_est <- unlist(results$BUGSoutput$mean)[-7]
coef_est
coef_est["alphad"]
coef_est[coef_names]
tibble(Variable=coef_names, Truth=truth_coef[coef_names], Est=coef_est[coef_names])
dat
dat$clst
re <- as.numeric(dat$clst)
Nre <- length(unique(re))
Nre
logitr
N <- 4000                                                                       #20 groups, each with 200 observations
NGroups <- 20
x1 <- runif(N)
x2 <- runif(N)
Groups <- rep(1:20, each = 200)
a <- rnorm(NGroups, mean = 0, sd = 0.5)
eta <- 1 + 0.2 * x1 - 0.75 * x2 + a[Groups]
mu <- 1/(1+exp(-eta))
y <- rbinom(N, prob=mu, size=1)
logitr <- data.frame(
y = y,
x1 = x1,
x2 = x2,
Groups = Groups,
RE = a[Groups]
)
logitr$Groups
logitr$Groups
re
Nre <- length(unique(dat$clst))
Nre
model.data <- list(
y1 = dat.in$y1, # Outcomes
y2 = dat.in$y2,
y_prev = dat.in$y1_prev,
x = dat.in$trt, # Covariates
N = nrow(dat.in), # Full dataset
cost = dat.dist$cost,
x2 = dat.dist$trt,
N2 = nrow(dat.dist), # Positive costs dataset
re = as.numeric(dat$clst), # Cluster RE
a0 = rep(0,length(unique(dat$clst))),
A0 = diag(length(unique(dat$clst)))
)
dat.in <- dat
dat.dist <- dat.in %>% distinct(cost, .keep_all=T) %>% filter(cost>0)
model.data <- list(
y1 = dat.in$y1, # Outcomes
y2 = dat.in$y2,
y_prev = dat.in$y1_prev,
x = dat.in$trt, # Covariates
N = nrow(dat.in), # Full dataset
cost = dat.dist$cost,
x2 = dat.dist$trt,
N2 = nrow(dat.dist), # Positive costs dataset
re = as.numeric(dat$clst), # Cluster RE
a0 = rep(0,length(unique(dat$clst))),
A0 = diag(length(unique(dat$clst)))
)
model.data
##### Create dataset #####
set.seed(3)
n_k <- 20 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
source("likelihood.R")
source("gendata.R")
source("jags.R")
##### Create dataset #####
set.seed(3)
n_k <- 20 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
dat
set.seed(3)
n_k <- 40 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
dat
dat.in <- dat
dat.dist <- dat.in %>% distinct(cost, .keep_all=T) %>% filter(cost>0)
model.data <- list(
y1 = dat.in$y1, # Outcomes
y2 = dat.in$y2,
y_prev = dat.in$y1_prev,
x = dat.in$trt, # Covariates
N = nrow(dat.in), # Full dataset
cost = dat.dist$cost,
x2 = dat.dist$trt,
N2 = nrow(dat.dist), # Positive costs dataset
re = as.numeric(dat$clst), # Cluster RE
a0 = rep(0,length(unique(dat$clst))),
A0 = diag(length(unique(dat$clst)))
)
model.data
source("likelihood.R")
source("gendata.R")
source("jags_re.R")
##### Create dataset #####
set.seed(3)
n_k <- 40 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
# Run algorithm
results <- GS(dat=dat)
dat
source("jags_re.R")
source("likelihood.R")
source("gendata.R")
source("jags_re.R")
set.seed(3)
n_k <- 40 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
# Run algorithm
results <- GS(dat=dat)
source("jags_re.R")
# Run algorithm
results <- GS(dat=dat)
dat.in <- dat
dat.dist <- dat.in %>% distinct(cost, .keep_all=T) %>% filter(cost>0)
dat.dist
model.data <- list(
y1 = dat.in$y1, # Outcomes
y2 = dat.in$y2,
y_prev = dat.in$y1_prev,
x = dat.in$trt, # Covariates
N = nrow(dat.in), # Full dataset
cost = dat.dist$cost,
x2 = dat.dist$trt,
N2 = nrow(dat.dist), # Positive costs dataset
re = as.numeric(dat$clst), # Cluster RE
re2 = as.numeric(dat.dist$clst),
a0 = rep(0,length(unique(dat$clst))),
A0 = diag(length(unique(dat$clst))),
a1 = rep(0,length(unique(dat.dist$clst))),
A1 = diag(length(unique(dat.dist$clst))),
)
model.data <- list(
y1 = dat.in$y1, # Outcomes
y2 = dat.in$y2,
y_prev = dat.in$y1_prev,
x = dat.in$trt, # Covariates
N = nrow(dat.in), # Full dataset
cost = dat.dist$cost,
x2 = dat.dist$trt,
N2 = nrow(dat.dist), # Positive costs dataset
re = as.numeric(dat$clst), # Cluster RE
re2 = as.numeric(dat.dist$clst),
a0 = rep(0,length(unique(dat$clst))),
A0 = diag(length(unique(dat$clst))),
a1 = rep(0,length(unique(dat.dist$clst))),
A1 = diag(length(unique(dat.dist$clst)))
)
model.data
source("jags_re.R")
source("likelihood.R")
source("gendata.R")
source("jags_re.R")
##### Create dataset #####
set.seed(3)
n_k <- 40 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
# Run algorithm
results <- GS(dat=dat)
source("jags_re.R")
# Run algorithm
results <- GS(dat=dat)
results
# Results
results$model1$BUGSoutput
# Results
results
results[1]
traceplot(results)
par <- c("alphay", "betay", "gammay","alpham", "betam", "shape", "alphad", "betad", "gammad",
"V1_sig", "V2_sig", "Vmu_sig")
traceplot(results, parameters=par)
par <- c("alphay", "betay", "gammay","alpham", "betam", "shape", "alphad", "betad", "gammad",
"V1_sig", "V2_sig", "Vmu_sig")
traceplot(results, parameters=par)
warnings()
traceplot(results, mfrow=c(3,3))
traceplot(results, mfrow=c(3,3), varname=par)
traceplot(results, mfrow=c(3,3), varname=par)
traceplot(results, mfrow=c(3,3), varname=par, ask=F)
results
results2 <- results
load(file="Output/run1.RData")
traceplot(results,mfrow=c(3,3))
results
traceplot(results,mfrow=c(3,3))
traceplot(results)
results
traceplot(results$model2, mfrow=c(3,3))
results <- results2
runif(1, 0, 5)
runif(1, 0, 5)
runif(1, 0, 5)
source("likelihood.R")
source("gendata.R")
source("jags_re.R")
##### Create dataset #####
set.seed(3)
n_k <- 40 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
# Run algorithm
results <- GS(dat=dat)
# Results
results
dat
dat$Vmu
dat %>% distinct(cost, .keep_all=T) %>% filter(cost>0)
exp(1 + 1%*%3 + 0)
exp(1 + 1%*%3 + -.417)
matrix(c(1,0,0),c(0,1,0),c(0,0,0.3))
matrix(c(1,0,0,0,1,0,0,0,0.3), nrow=3)
exp(1 + 1%*%3 + 2.4)
matrix(c(1,0,0),c(0,1,0),c(0,0,0.1))
matrix(c(1,0,0,0,1,0,0,0,0.2), nrow=3)
rnorm(1000,0,0.2)
rnorm(1000,0,0.01)
rnorm(1000,0,0.05)
matrix(c(1,0,0,0,1,0,0,0,0.05), nrow=3)
set.seed(3)
n_k <- 40 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
dat
source("likelihood.R")
source("gendata.R")
source("jags_re.R")
set.seed(3)
n_k <- 40 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
dat
summary(dat$Vmu)
summary(dat$Vmu)
# Run algorithm
results <- GS(dat=dat)
results
traceplot(results, mfrow=c(3,3), varname=par, ask=F)
par <- c("alphay", "betay", "gammay","alpham", "betam", "shape", "alphad", "betad", "gammad",
"V1", "V1_sig", "V2_sig", "Vmu_sig")
traceplot(results, mfrow=c(3,3), varname=par, ask=F)
# Results
results
source("gendata.R")
##### Create dataset #####
set.seed(3)
n_k <- 40 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
# Run algorithm
results <- GS(dat=dat)
results
traceplot(results, mfrow=c(3,3), varname=par, ask=F)
source("likelihood.R")
source("gendata.R")
source("jags_re.R")
##### Create dataset #####
set.seed(3)
n_k <- 60 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
# Run algorithm
results <- GS(dat=dat)
results
traceplot(results, mfrow=c(3,3), varname=par, ask=F)
par <- c("alphay", "betay", "gammay","alpham", "betam", "shape", "alphad", "betad", "gammad",
"V1", "V1_sig", "V2_sig", "Vmu_sig")
traceplot(results, mfrow=c(3,3), varname=par, ask=F)
source("likelihood.R")
source("gendata.R")
source("jags_re.R")
##### Create dataset #####
set.seed(3)
n_k <- 60 # Number of individuals per cluster
n_t <- 12 # Max number of time points per individual
k <- 30 # Number of clusters
dat <- gen_data(n_k=n_k, n_t=n_t, k=k) # Generate data
dat
summary(dat$Vmu)
source("jags_re.R")
# Run algorithm
results <- GS(dat=dat)
results
traceplot(results, mfrow=c(3,3), varname=par, ask=F)
par <- c("alphay", "betay", "gammay","alpham", "betam", "shape", "alphad", "betad", "gammad",
"V1", "V1_sig", "V2_sig", "Vmu_sig")
traceplot(results, mfrow=c(3,3), varname=par, ask=F)
traceplot(results, mfrow=c(3,3), ask=F)
##### Params for cluster #####
# params <- commandArgs(trailingOnly=TRUE)
# simNum <- as.numeric(params[[1]])
# write.csv(results, paste0("out", simNum, ".csv"))
# load(file="Output/run1.RData")
save(results, file="Output/run3.RData")
results
source("jags.R")
dat
# Run algorithm
results <- GS(dat=dat)
traceplot(results, mfrow=c(3,3), ask=F)
results
##### Params for cluster #####
# params <- commandArgs(trailingOnly=TRUE)
# simNum <- as.numeric(params[[1]])
# write.csv(results, paste0("out", simNum, ".csv"))
# load(file="Output/jags_re.RData")
save(results, file="Output/jags.RData")

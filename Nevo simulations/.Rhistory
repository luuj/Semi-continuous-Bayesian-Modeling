# Calculate multinomial probabilities
prob_00 <- 1-pi1-pi2+pi12
prob_01 <- pi2-pi12
prob_10 <- pi1-pi12
prob_11 <- pi12
# Choose outcome
out <- which(rmultinom(1,1,c(prob_00,prob_01,prob_10,prob_11))==1)
curr_index <- (i-1)*n_obs + j
print(c(prob_00,prob_01,prob_10,prob_11,out))
switch(out,
1={dat[curr_index,"y1"]=0
dat[curr_index,"y2"]==0},
2={dat[curr_index,"y1"]=0
dat[curr_index,"y2"]==1},
3={dat[curr_index,"y1"]=1
dat[curr_index,"y2"]==0},
4={dat[curr_index,"y1"]=1
dat[curr_index,"y2"]==1}
)
}
}
return(dat)
}
# Generate data
gen_data <- function(n=20, n_obs=5){
trt <- rep(rbinom(n,1,0.5),each=n_obs)
t <- rep(70:74,n_obs)
id <- rep(1:n, each=n_obs)
beta <- data.frame(beta1=3, beta2=3, betat=3, beta1y=log(1.2), beta2y=log(1.4))
dat <- data.frame(id,t,y1=0,y2=0,trt)
ind_data <- dat %>% group_split(id)
for (i in 1:length(ind_data)){
curr_data <- ind_data[[i]]
# Generate sequence of outcomes
for (j in 2:n_obs){
y1_prev <- curr_data[j-1,]$y1
y2_prev <- curr_data[j-1,]$y2
curr_obs <- curr_data[j,]
trt <- curr_obs$trt
t <- curr_obs$t
# Stop if terminal event
if (y2_prev == 1){
next
}
# Calculate values of pi1 and pi2, given previous y1
theta <- theta(beta$betat, trt, t)
pi1 <- pi1(beta$beta1, trt, t, y1_prev, beta$beta1y)
pi2 <- pi2(beta$beta2, trt, t, y1_prev, beta$beta2y)
pi12 <- pi12(theta,pi1,pi2)
# Calculate multinomial probabilities
prob_00 <- 1-pi1-pi2+pi12
prob_01 <- pi2-pi12
prob_10 <- pi1-pi12
prob_11 <- pi12
# Choose outcome
out <- which(rmultinom(1,1,c(prob_00,prob_01,prob_10,prob_11))==1)
curr_index <- (i-1)*n_obs + j
print(c(prob_00,prob_01,prob_10,prob_11,out))
switch(out,
{dat[curr_index,"y1"]=0
dat[curr_index,"y2"]=0},
{dat[curr_index,"y1"]=0
dat[curr_index,"y2"]=1},
{dat[curr_index,"y1"]=1
dat[curr_index,"y2"]=0},
{dat[curr_index,"y1"]=1
dat[curr_index,"y2"]=1}
)
}
}
return(dat)
}
gen_data()
# Generate data
gen_data <- function(n=20, n_obs=5){
trt <- rep(rbinom(n,1,0.5),each=n_obs)
t <- rep(70:74,n_obs)
id <- rep(1:n, each=n_obs)
beta <- data.frame(beta1=3, beta2=3, betat=3, beta1y=log(1.2), beta2y=log(1.4))
dat <- data.frame(id,t,y1=0,y2=0,trt)
ind_data <- dat %>% group_split(id)
for (i in 1:length(ind_data)){
curr_data <- ind_data[[i]]
# Generate sequence of outcomes
for (j in 2:n_obs){
y1_prev <- curr_data[j-1,]$y1
y2_prev <- curr_data[j-1,]$y2
curr_obs <- curr_data[j,]
trt <- curr_obs$trt
t <- curr_obs$t
# Stop if terminal event
if (y2_prev == 1){
break
}
# Calculate values of pi1 and pi2, given previous y1
theta <- theta(beta$betat, trt, t)
pi1 <- pi1(beta$beta1, trt, t, y1_prev, beta$beta1y)
pi2 <- pi2(beta$beta2, trt, t, y1_prev, beta$beta2y)
pi12 <- pi12(theta,pi1,pi2)
# Calculate multinomial probabilities
prob_00 <- 1-pi1-pi2+pi12
prob_01 <- pi2-pi12
prob_10 <- pi1-pi12
prob_11 <- pi12
# Choose outcome
out <- which(rmultinom(1,1,c(prob_00,prob_01,prob_10,prob_11))==1)
curr_index <- (i-1)*n_obs + j
print(c(prob_00,prob_01,prob_10,prob_11,out))
switch(out,
{dat[curr_index,"y1"]=0
dat[curr_index,"y2"]=0},
{dat[curr_index,"y1"]=0
dat[curr_index,"y2"]=1},
{dat[curr_index,"y1"]=1
dat[curr_index,"y2"]=0},
{dat[curr_index,"y1"]=1
dat[curr_index,"y2"]=1}
)
}
}
return(dat)
}
gen_data()
# Generate data
gen_data <- function(n=20, n_obs=5){
trt <- rep(rbinom(n,1,0.5),each=n_obs)
t <- rep(70:74,n_obs)
id <- rep(1:n, each=n_obs)
beta <- data.frame(beta1=3, beta2=3, betat=3, beta1y=log(1.2), beta2y=log(1.4))
dat <- data.frame(id,t,y1=0,y2=0,trt)
ind_data <- dat %>% group_split(id)
for (i in 1:length(ind_data)){
curr_data <- ind_data[[i]]
# Generate sequence of outcomes
for (j in 2:n_obs){
y1_prev <- curr_data[j-1,]$y1
y2_prev <- curr_data[j-1,]$y2
curr_obs <- curr_data[j,]
trt <- curr_obs$trt
t <- curr_obs$t
# Stop if terminal event
if (y2_prev == 1){
break
}
# Calculate values of pi1 and pi2, given previous y1
theta <- theta(beta$betat, trt, t)
pi1 <- pi1(beta$beta1, trt, t, y1_prev, beta$beta1y)
pi2 <- pi2(beta$beta2, trt, t, y1_prev, beta$beta2y)
pi12 <- pi12(theta,pi1,pi2)
# Calculate multinomial probabilities
prob_00 <- 1-pi1-pi2+pi12
prob_01 <- pi2-pi12
prob_10 <- pi1-pi12
prob_11 <- pi12
# Choose outcome
out <- which(rmultinom(1,1,c(prob_00,prob_01,prob_10,prob_11))==1)
curr_index <- (i-1)*n_obs + j
print(c(prob_00,prob_01,prob_10,prob_11,out))
switch(out,
{dat[curr_index,"y1"]=0
dat[curr_index,"y2"]=0},
{dat[curr_index,"y1"]=0
dat[curr_index,"y2"]=1},
{dat[curr_index,"y1"]=1
dat[curr_index,"y2"]=0},
{dat[curr_index,"y1"]=1
dat[curr_index,"y2"]=1}
)
}
}
return(dat)
}
gen_data()
# Generate data
gen_data <- function(n=20, n_obs=5){
trt <- rep(rbinom(n,1,0.5),each=n_obs)
t <- rep(70:74,n_obs)
id <- rep(1:n, each=n_obs)
beta <- data.frame(beta1=3, beta2=3, betat=3, beta1y=log(1.2), beta2y=log(1.4))
dat <- data.frame(id,t,y1=0,y2=0,trt)
ind_data <- dat %>% group_split(id)
for (i in 1:length(ind_data)){
curr_data <- ind_data[[i]]
# Generate sequence of outcomes
for (j in 2:n_obs){
y1_prev <- curr_data[j-1,]$y1
y2_prev <- curr_data[j-1,]$y2
curr_obs <- curr_data[j,]
trt <- curr_obs$trt
t <- curr_obs$t
# Stop if terminal event
if (y2_prev == 1){
browser()
break
}
# Calculate values of pi1 and pi2, given previous y1
theta <- theta(beta$betat, trt, t)
pi1 <- pi1(beta$beta1, trt, t, y1_prev, beta$beta1y)
pi2 <- pi2(beta$beta2, trt, t, y1_prev, beta$beta2y)
pi12 <- pi12(theta,pi1,pi2)
# Calculate multinomial probabilities
prob_00 <- 1-pi1-pi2+pi12
prob_01 <- pi2-pi12
prob_10 <- pi1-pi12
prob_11 <- pi12
# Choose outcome
out <- which(rmultinom(1,1,c(prob_00,prob_01,prob_10,prob_11))==1)
curr_index <- (i-1)*n_obs + j
print(c(prob_00,prob_01,prob_10,prob_11,out))
switch(out,
{dat[curr_index,"y1"]=0
dat[curr_index,"y2"]=0},
{dat[curr_index,"y1"]=0
dat[curr_index,"y2"]=1},
{dat[curr_index,"y1"]=1
dat[curr_index,"y2"]=0},
{dat[curr_index,"y1"]=1
dat[curr_index,"y2"]=1}
)
}
}
return(dat)
}
gen_data()
# Generate data
gen_data <- function(n=20, n_obs=5){
trt <- rep(rbinom(n,1,0.5),each=n_obs)
t <- rep(70:74,n_obs)
id <- rep(1:n, each=n_obs)
beta <- data.frame(beta1=3, beta2=3, betat=3, beta1y=log(1.2), beta2y=log(1.4))
dat <- data.frame(id,t,y1=0,y2=0,trt)
ind_data <- dat %>% group_split(id)
for (i in 1:length(ind_data)){
curr_data <- ind_data[[i]]
# Generate sequence of outcomes
for (j in 2:n_obs){
y1_prev <- curr_data[j-1,]$y1
y2_prev <- curr_data[j-1,]$y2
curr_obs <- curr_data[j,]
trt <- curr_obs$trt
t <- curr_obs$t
browser()
# Stop if terminal event
if (y2_prev == 1){
break
}
# Calculate values of pi1 and pi2, given previous y1
theta <- theta(beta$betat, trt, t)
pi1 <- pi1(beta$beta1, trt, t, y1_prev, beta$beta1y)
pi2 <- pi2(beta$beta2, trt, t, y1_prev, beta$beta2y)
pi12 <- pi12(theta,pi1,pi2)
# Calculate multinomial probabilities
prob_00 <- 1-pi1-pi2+pi12
prob_01 <- pi2-pi12
prob_10 <- pi1-pi12
prob_11 <- pi12
# Choose outcome
out <- which(rmultinom(1,1,c(prob_00,prob_01,prob_10,prob_11))==1)
curr_index <- (i-1)*n_obs + j
print(c(prob_00,prob_01,prob_10,prob_11,out))
switch(out,
{dat[curr_index,"y1"]=0
dat[curr_index,"y2"]=0},
{dat[curr_index,"y1"]=0
dat[curr_index,"y2"]=1},
{dat[curr_index,"y1"]=1
dat[curr_index,"y2"]=0},
{dat[curr_index,"y1"]=1
dat[curr_index,"y2"]=1}
)
}
}
return(dat)
}
gen_data()
curr_data
j
curr_data[j-1,]
curr_data[j-1,]$y1
curr_data[j-1,]$y2
y2_prev
y2_prev
y2_prev
y2_prev
# Generate data
gen_data <- function(n=20, n_obs=5){
trt <- rep(rbinom(n,1,0.5),each=n_obs)
t <- rep(70:74,n_obs)
id <- rep(1:n, each=n_obs)
beta <- data.frame(beta1=3, beta2=3, betat=3, beta1y=log(1.2), beta2y=log(1.4))
dat <- data.frame(id,t,y1=0,y2=0,trt)
for (i in 1:n){
# Generate sequence of outcomes
for (j in 2:n_obs){
ci <- (i-1)*n_obs + j
y1_prev <- dat[ci-1,]$y1
y2_prev <- dat[ci-1,]$y2
curr_obs <- dat[ci,]
trt <- curr_obs$trt
t <- curr_obs$t
browser()
# Stop if terminal event
if (y2_prev == 1){
break
}
# Calculate values of pi1 and pi2, given previous y1
theta <- theta(beta$betat, trt, t)
pi1 <- pi1(beta$beta1, trt, t, y1_prev, beta$beta1y)
pi2 <- pi2(beta$beta2, trt, t, y1_prev, beta$beta2y)
pi12 <- pi12(theta,pi1,pi2)
# Calculate multinomial probabilities
prob_00 <- 1-pi1-pi2+pi12
prob_01 <- pi2-pi12
prob_10 <- pi1-pi12
prob_11 <- pi12
# Choose outcome
out <- which(rmultinom(1,1,c(prob_00,prob_01,prob_10,prob_11))==1)
print(c(prob_00,prob_01,prob_10,prob_11,out))
switch(out,
{dat[ci,"y1"]=0
dat[ci,"y2"]=0},
{dat[ci,"y1"]=0
dat[ci,"y2"]=1},
{dat[ci,"y1"]=1
dat[ci,"y2"]=0},
{dat[ci,"y1"]=1
dat[ci,"y2"]=1}
)
}
}
return(dat)
}
gen_data()
ci
y1_prev
y2_prev
curr_obs
# Generate data
gen_data <- function(n=20, n_obs=5){
trt <- rep(rbinom(n,1,0.5),each=n_obs)
t <- rep(70:74,n_obs)
id <- rep(1:n, each=n_obs)
beta <- data.frame(beta1=3, beta2=3, betat=3, beta1y=log(1.2), beta2y=log(1.4))
dat <- data.frame(id,t,y1=0,y2=0,trt)
for (i in 1:n){
# Generate sequence of outcomes
for (j in 2:n_obs){
ci <- (i-1)*n_obs + j
y1_prev <- dat[ci-1,]$y1
y2_prev <- dat[ci-1,]$y2
curr_obs <- dat[ci,]
trt <- curr_obs$trt
t <- curr_obs$t
# Stop if terminal event
if (y2_prev == 1){
break
}
# Calculate values of pi1 and pi2, given previous y1
theta <- theta(beta$betat, trt, t)
pi1 <- pi1(beta$beta1, trt, t, y1_prev, beta$beta1y)
pi2 <- pi2(beta$beta2, trt, t, y1_prev, beta$beta2y)
pi12 <- pi12(theta,pi1,pi2)
# Calculate multinomial probabilities
prob_00 <- 1-pi1-pi2+pi12
prob_01 <- pi2-pi12
prob_10 <- pi1-pi12
prob_11 <- pi12
# Choose outcome
out <- which(rmultinom(1,1,c(prob_00,prob_01,prob_10,prob_11))==1)
print(c(prob_00,prob_01,prob_10,prob_11,out))
switch(out,
{dat[ci,"y1"]=0
dat[ci,"y2"]=0},
{dat[ci,"y1"]=0
dat[ci,"y2"]=1},
{dat[ci,"y1"]=1
dat[ci,"y2"]=0},
{dat[ci,"y1"]=1
dat[ci,"y2"]=1}
)
}
}
return(dat)
}
gen_data()
# Generate data
gen_data <- function(n=20, n_obs=5){
trt <- rep(rbinom(n,1,0.5),each=n_obs)
t <- rep(70:74,n_obs)
id <- rep(1:n, each=n_obs)
beta <- data.frame(beta1=-1, beta2=3, betat=3, beta1y=log(1.2), beta2y=log(1.4))
dat <- data.frame(id,t,y1=0,y2=0,trt)
for (i in 1:n){
# Generate sequence of outcomes
for (j in 2:n_obs){
ci <- (i-1)*n_obs + j
y1_prev <- dat[ci-1,]$y1
y2_prev <- dat[ci-1,]$y2
curr_obs <- dat[ci,]
trt <- curr_obs$trt
t <- curr_obs$t
# Stop if terminal event
if (y2_prev == 1){
break
}
# Calculate values of pi1 and pi2, given previous y1
theta <- theta(beta$betat, trt, t)
pi1 <- pi1(beta$beta1, trt, t, y1_prev, beta$beta1y)
pi2 <- pi2(beta$beta2, trt, t, y1_prev, beta$beta2y)
pi12 <- pi12(theta,pi1,pi2)
# Calculate multinomial probabilities
prob_00 <- 1-pi1-pi2+pi12
prob_01 <- pi2-pi12
prob_10 <- pi1-pi12
prob_11 <- pi12
# Choose outcome
out <- which(rmultinom(1,1,c(prob_00,prob_01,prob_10,prob_11))==1)
# print(c(prob_00,prob_01,prob_10,prob_11,out))
switch(out,
{dat[ci,"y1"]=0
dat[ci,"y2"]=0},
{dat[ci,"y1"]=0
dat[ci,"y2"]=1},
{dat[ci,"y1"]=1
dat[ci,"y2"]=0},
{dat[ci,"y1"]=1
dat[ci,"y2"]=1}
)
}
}
return(dat)
}
gen_data()
# Generate data
gen_data <- function(n=20, n_obs=5){
trt <- rep(rbinom(n,1,0.5),each=n_obs)
t <- rep(70:74,n_obs)
id <- rep(1:n, each=n_obs)
beta <- data.frame(beta1=5, beta2=3, betat=3, beta1y=log(1.2), beta2y=log(1.4))
dat <- data.frame(id,t,y1=0,y2=0,trt)
for (i in 1:n){
# Generate sequence of outcomes
for (j in 2:n_obs){
ci <- (i-1)*n_obs + j
y1_prev <- dat[ci-1,]$y1
y2_prev <- dat[ci-1,]$y2
curr_obs <- dat[ci,]
trt <- curr_obs$trt
t <- curr_obs$t
# Stop if terminal event
if (y2_prev == 1){
break
}
# Calculate values of pi1 and pi2, given previous y1
theta <- theta(beta$betat, trt, t)
pi1 <- pi1(beta$beta1, trt, t, y1_prev, beta$beta1y)
pi2 <- pi2(beta$beta2, trt, t, y1_prev, beta$beta2y)
pi12 <- pi12(theta,pi1,pi2)
# Calculate multinomial probabilities
prob_00 <- 1-pi1-pi2+pi12
prob_01 <- pi2-pi12
prob_10 <- pi1-pi12
prob_11 <- pi12
# Choose outcome
out <- which(rmultinom(1,1,c(prob_00,prob_01,prob_10,prob_11))==1)
print(c(prob_00,prob_01,prob_10,prob_11,out))
switch(out,
{dat[ci,"y1"]=0
dat[ci,"y2"]=0},
{dat[ci,"y1"]=0
dat[ci,"y2"]=1},
{dat[ci,"y1"]=1
dat[ci,"y2"]=0},
{dat[ci,"y1"]=1
dat[ci,"y2"]=1}
)
}
}
return(dat)
}
gen_data()
temp <- 70:74
plot(temp, inv.logit(alpha1(temp)), type="l")
plot(temp, inv.logit(alpha1(temp)), type="l")
alpha1 <- function(t){
logit(0.2 + 0.002*(t-65) + 0.0008*(t-70)^2 - 0.0000128*(t-62.5)^3)
}
temp <- 70:74
plot(temp, inv.logit(alpha1(temp)), type="l")
alpha1 <- function(t){
logit(0.2 + 0.02*(t-65) + 0.008*(t-70)^2 - 0.000128*(t-62.5)^3)
}
temp <- 70:74
plot(temp, inv.logit(alpha1(temp)), type="l")
# Functions to calculate time-dependent alphas
alpha1 <- function(t){
logit(0.2 + 0.06*(t-65) + 0.08*(t-70)^2 - 0.00128*(t-62.5)^3)
}
temp <- 70:74
plot(temp, inv.logit(alpha1(temp)), type="l")
# Functions to calculate time-dependent alphas
alpha1 <- function(t){
logit(0.2 + 0.06*(t-65) + 0.01*(t-70)^2)
}
temp <- 70:74
plot(temp, inv.logit(alpha1(temp)), type="l")
# Functions to calculate time-dependent alphas
alpha1 <- function(t){
logit(0.2 + 0.02*(t-65) + 0.005*(t-70)^2)
}
temp <- 70:74
plot(temp, inv.logit(alpha1(temp)), type="l")
